<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Let's Code]]></title>
  <link href="http://evan-007.github.io/atom.xml" rel="self"/>
  <link href="http://evan-007.github.io/"/>
  <updated>2014-11-29T16:19:58-05:00</updated>
  <id>http://evan-007.github.io/</id>
  <author>
    <name><![CDATA[Evan]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Qunit Testing]]></title>
    <link href="http://evan-007.github.io/blog/2014/11/29/qunit-testing/"/>
    <updated>2014-11-29T13:30:48-05:00</updated>
    <id>http://evan-007.github.io/blog/2014/11/29/qunit-testing</id>
    <content type="html"><![CDATA[<p>Qunit docs suck.<!--more--></p>

<h1>Commands for qunit</h1>

<figure class='code'><figcaption><span>visit-url.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">test</span><span class="p">(</span><span class="s1">&#39;visit some emberURL&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">visit</span><span class="p">(</span><span class="s1">&#39;/whatever&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>match-str.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">find</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;Something you want to match.&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">pattern</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">text</span><span class="p">),</span> <span class="kc">true</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>fillout-submit-form.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">test</span><span class="p">(</span><span class="s1">&#39;click on stuff&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">visit</span><span class="p">(</span><span class="s1">&#39;/signup&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#email&#39;</span><span class="p">,</span> <span class="s1">&#39;myName&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#password&#39;</span><span class="p">,</span> <span class="s1">&#39;pasword&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#password_confirmation&#39;</span><span class="p">,</span> <span class="s1">&#39;pasword&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">click</span><span class="p">(</span><span class="s1">&#39;#signup&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">alert</span> <span class="o">=</span> <span class="nx">find</span><span class="p">(</span><span class="s1">&#39;.alert-success&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">pat</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;Thanks for signing up&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>          <span class="nx">equal</span><span class="p">(</span><span class="nx">pat</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">alert</span><span class="p">),</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Madlibs]]></title>
    <link href="http://evan-007.github.io/blog/2014/11/29/ember-madlibs/"/>
    <updated>2014-11-29T10:41:01-05:00</updated>
    <id>http://evan-007.github.io/blog/2014/11/29/ember-madlibs</id>
    <content type="html"><![CDATA[<p>Build a simple madlibs app with ember cli.<!--more--></p>

<p>I learned angularJS with <a href="http://www.thinkful.com">thinkful</a> by building lots
of small projects and gradually learning the angular stack. Let&rsquo;s do the same thing with emberJS and ember cli!</p>

<h1>The Project</h1>

<p>Everyone knows madlibs &ndash; you enter random nouns, verbs, adjectives,
 etc and then get a hopefully hilarious story at the end. It&rsquo;s a nice project
 for a firstshot with a JS framework because it&rsquo;s an actual use-case for
 two-way binding.</p>

<p> Basically, we&rsquo;ll build a simple form that prompts the user for different parts
 of speech and then reveals the story upon completion.</p>

<p>This post uses <code>"ember-cli": "0.1.2"</code>, which loads <code>"ember": "1.7.0", "ember-data": "1.0.0-beta.10"</code>.</p>

<h1>Getting Started</h1>

<p>Install ember-cli <code>npm install -g ember-cli</code>, make a new project
<code>ember new madlibs</code>, start the server <code>ember s</code> and open the project in
whatever your editor is.</p>

<p>First, we need to make a test for viewing our homepage. Borrowing from
<a href="http://reefpoints.dockyard.com/2014/05/08/building-an-ember-app-with-rails-part-2.html">Dockyard</a>, create the first integration test:</p>

<figure class='code'><figcaption><span>tests/integration/homepage-test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">startApp</span> <span class="nx">from</span> <span class="s1">&#39;madlibs/tests/helpers/start-app&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">App</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;Integration - Homepage&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">setup</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">App</span> <span class="o">=</span> <span class="nx">startApp</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">teardown</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">App</span><span class="p">,</span> <span class="s1">&#39;destroy&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;should welcome the user&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">visit</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;h2&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span> <span class="s1">&#39;Ember Madlibs&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Visit <code>localhost:4200/tests</code> and it will fail. To make it pass, update the application template:</p>

<figure class='code'><figcaption><span>app/templates/application.hbs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2</span> <span class="na">id=</span><span class="s">&#39;title&#39;</span><span class="nt">&gt;</span>Ember Madlibs<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'>
</span><span class='line'>{{outlet}}
</span></code></pre></td></tr></table></div></figure>


<p>And now the test should pass.</p>

<h1>The madlib</h1>

<p>The madlib will be a form that the user fills out, and then show the resulting story
when the form is submitted. Let&rsquo;s write a high level test for this feature:</p>

<figure class='code'><figcaption><span>filling-out-madlibs-test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">startApp</span> <span class="nx">from</span> <span class="s1">&#39;madlibs/tests/helpers/start-app&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">App</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;Integration - Filling out Madlibs&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">setup</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">App</span> <span class="o">=</span> <span class="nx">startApp</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">teardown</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">App</span><span class="p">,</span> <span class="s1">&#39;destroy&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;should display a hilarious story&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">visit</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#javascript-framework&#39;</span><span class="p">,</span> <span class="s1">&#39;EmberJS&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#person-name&#39;</span><span class="p">,</span> <span class="s1">&#39;Captain America&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#mega-corp&#39;</span><span class="p">,</span> <span class="s1">&#39;WallMart&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#animal&#39;</span><span class="p">,</span> <span class="s1">&#39;swampHawk&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#ridiculous-adj&#39;</span><span class="p">,</span> <span class="s1">&#39;insane&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">click</span><span class="p">(</span><span class="s1">&#39;#submit&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">text</span> <span class="o">=</span> <span class="nx">find</span><span class="p">(</span><span class="s1">&#39;p&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">();</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">pattern</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">RegExp</span><span class="p">(</span><span class="s1">&#39;Captain America&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">equal</span><span class="p">(</span><span class="nx">pattern</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">text</span><span class="p">),</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test visits our forms, finds input fields based on their <code>id</code>, submits the form
and then expects a <code>p</code> that contains &lsquo;Captain America&rsquo;. This test is enough to show that the madlib functions, but also highlights one of the issues with high-level integration tests: they are brittle.</p>

<p>We could have tested that the entire text of the madlib <code>p</code> matched all of our input values, but what happens when we decide to start changing our madlibs story? The test breaks and we have to change it. Using a <code>regex</code> to match the value from the name input decouples our test a little, at the expense of verifying that all of our
madlib inputs are in the resulting text. We could repeat the <code>equal(pattern.test(text), true);</code> for each of our input fields, but that seems like it would take too long.</p>

<p>Let&rsquo;s make the test pass. So far, our app only has an application template.
The application template is a good place to hook up at navbar or footer, but
we probably shouldn&rsquo;t put the application in that template. By default, ember will
put the <code>index.hbs</code> template in that <code>outlet</code>, but we have to generate it: <code>ember g template index</code>. Now, let&rsquo;s build our form:</p>

<figure class='code'><figcaption><span>index.hbs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="err">{{</span><span class="na">action</span> <span class="err">&#39;</span><span class="na">showStory</span><span class="err">&#39;</span> <span class="na">on=</span><span class="s">&#39;submit&#39;</span><span class="err">}}</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    {{input type=text id=&#39;javascript-framework&#39; value=jsFramework placeholder=&#39;JS framework&#39;}}
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    {{input type=text id=&#39;person-name&#39; value=name placeholder=&quot;Person&#39;s name&quot;}}
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    {{input type=text id=&#39;mega-corp&#39; value=corp placeholder=&quot;Mega corporation&quot;}}
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    {{input type=text id=&#39;animal&#39; value=animal placeholder=&#39;Silly animal&#39;}}
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    {{input type=text id=&#39;ridiculous-adj&#39; value=emo-adj placeholder=&#39;Negative Adjective&#39;}}
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&#39;submit&#39;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Make a story!&quot;</span><span class="nt">&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just a simple form with handlebars helpers to build the <code>input</code> fields.
The submit action calls <code>showStory</code>, a function we have yet to define. The test
fails because this action does not exist yet: <code>Uncaught Error: Nothing handled the action 'showStory'. If you did handle the action, this error can be caused by returning true from an action handler in a controller, causing the action to bubble.</code></p>

<p>Taking a hint from the error message, it sounds like we need to handle this in a
controller. We&rsquo;re using the <code>index</code> template, so generate a matching controller:
<code>ember g controller index</code>.</p>

<p>Before we build out <code>showStory</code>, let&rsquo;s think a bit more about how this will work.
When the page is loaded, we&rsquo;ll create a property called <code>finishedStory</code> and set it to <code>false</code>. After submitting the form, we can update <code>finishedStory</code> to equal true.
In our template, we&rsquo;ll hide/show our madlib story based on the value of <code>finishedStory</code>.</p>

<p>First, update the <code>index</code> template to include the story:</p>

<figure class='code'><figcaption><span>index.hbs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!--after the form--&gt;</span>
</span><span class='line'>  {{#if finishedStory}}
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      {{name}}, a {{jsFramework}} developer, was {{emo-adj}} until he found {{animal}}JS, a new framework from {{corp}}.
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>{{/if}}
</span></code></pre></td></tr></table></div></figure>


<p>Now let&rsquo;s write a test for our controller.</p>

<figure class='code'><figcaption><span>tests/unit/controllers/index-test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">moduleFor</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">test</span>
</span><span class='line'><span class="p">}</span> <span class="nx">from</span> <span class="s1">&#39;ember-qunit&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">moduleFor</span><span class="p">(</span><span class="s1">&#39;controller:index&#39;</span><span class="p">,</span> <span class="s1">&#39;IndexController&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// Specify the other units that are required for this test.</span>
</span><span class='line'>  <span class="c1">// needs: [&#39;controller:foo&#39;]</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Replace this with your real tests.</span>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;it exists&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">controller</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">subject</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">ok</span><span class="p">(</span><span class="nx">controller</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;finishedStory initializes to false&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">controller</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">subject</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">controller</span><span class="p">.</span><span class="nx">finishedStory</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Easy &ndash; ember generates most of that code for us, we just add the test that
our controller comes with a property called <code>finishedStory</code> that is <code>false</code>.</p>

<p>The test fails because <code>finishedStory</code> is undefined, so make it pass:</p>

<figure class='code'><figcaption><span>app/controllers/index.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">finishedStory</span><span class="o">:</span> <span class="kc">false</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>and now the test should pass. Let&rsquo;s extend the test to cover our form submit.
Remember, when the form is submitted, we need to call some <code>showStory</code> action that
sets <code>finishedStory</code> to <code>true</code>.</p>

<figure class='code'><figcaption><span>tests/unit/controllers/index-test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// bunch of stuff omitted</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;showStory changes finishedStory to true&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">controller</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">subject</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">controller</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;showStory&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">controller</span><span class="p">.</span><span class="nx">finishedStory</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we simulate sending the action from our form and expect the controller to do
its thing. To make this pass:</p>

<figure class='code'><figcaption><span>app/controllers/index.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">finishedStory</span><span class="o">:</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">showStory</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;finishedStory&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>And with that the controller passes! This completes the form submit event, so
it should also make the integration test pass.</p>

<p>But what happens when someone wants to try our madlibs a second time? We need a
reset button and should probably also not allow them to just change the form values.
Let&rsquo;s hide the form and submit buttons after the form is submitted and replace it
with a reset button.</p>

<figure class='code'><figcaption><span>resetting-madlibs-test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">import</span> <span class="nx">startApp</span> <span class="nx">from</span> <span class="s1">&#39;madlibs/tests/helpers/start-app&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">App</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;Integration - resetting Madlibs&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">setup</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">App</span> <span class="o">=</span> <span class="nx">startApp</span><span class="p">();</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nx">teardown</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">Ember</span><span class="p">.</span><span class="nx">run</span><span class="p">(</span><span class="nx">App</span><span class="p">,</span> <span class="s1">&#39;destroy&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;should clear the form&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="nx">visit</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#javascript-framework&#39;</span><span class="p">,</span> <span class="s1">&#39;EmberJS&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#person-name&#39;</span><span class="p">,</span> <span class="s1">&#39;Captain America&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#mega-corp&#39;</span><span class="p">,</span> <span class="s1">&#39;WallMart&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#animal&#39;</span><span class="p">,</span> <span class="s1">&#39;swampHawk&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">fillIn</span><span class="p">(</span><span class="s1">&#39;input#ridiculous-adj&#39;</span><span class="p">,</span> <span class="s1">&#39;insane&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">click</span><span class="p">(</span><span class="s1">&#39;#submit&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">click</span><span class="p">(</span><span class="s1">&#39;#reset&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">equal</span><span class="p">(</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;input#person-name&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(),</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>There&rsquo;s some code duplication from the previous integration test that
should probably be refactored into a helper later, but here we
just submit the form, then click <code>reset</code> and expect the form to be blank.</p>

<p>This fails because it doesn&rsquo;t have a button to click yet. Before we add it,
let&rsquo;s think about how this workflow will work.</p>

<p><em>User enters page
</em>form is blank &amp; shown + text is hidden
<em>user submits form
</em>form is hidden, text is shown
<em>user clicks reset
</em>form is blank &amp; shown, text is hidden</p>

<p>We&rsquo;ve already used the boolean <code>finishedStory</code> to hide/show the madlibs text,
so let&rsquo;s repurpose that to handle the rest of the hiding/showing.</p>

<figure class='code'><figcaption><span>index.hbs </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>{{#unless finishedStory}}
</span><span class='line'>  <span class="nt">&lt;form</span> <span class="err">{{</span><span class="na">action</span> <span class="err">&#39;</span><span class="na">showStory</span><span class="err">&#39;</span> <span class="na">on=</span><span class="s">&#39;submit&#39;</span><span class="err">}}</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      {{input type=text id=&#39;javascript-framework&#39; value=jsFramework placeholder=&#39;JS framework&#39;}}
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      {{input type=text id=&#39;person-name&#39; value=name placeholder=&quot;Person&#39;s name&quot;}}
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      {{input type=text id=&#39;mega-corp&#39; value=corp placeholder=&quot;Mega corporation&quot;}}
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      {{input type=text id=&#39;animal&#39; value=animal placeholder=&#39;Silly animal&#39;}}
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;p&gt;</span>
</span><span class='line'>      {{input type=text id=&#39;adj&#39; value=adj placeholder=&#39;Negative Adjective&#39;}}
</span><span class='line'>    <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">id=</span><span class="s">&#39;submit&#39;</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Make a story!&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/form&gt;</span>
</span><span class='line'>{{else}}
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    {{name}}, a {{jsFramework}} developer, was {{adj}} until he found {{animal}}JS, a new framework from {{corp}}.
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">id=</span><span class="s">&#39;reset&#39;</span> <span class="err">{{</span><span class="na">action</span> <span class="err">&#39;</span><span class="na">resetStory</span><span class="err">&#39;</span> <span class="na">on=</span><span class="s">&#39;click&#39;</span><span class="err">}}</span> <span class="na">value=</span><span class="s">&quot;Try again?&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>
</span><span class='line'>{{/unless}}
</span></code></pre></td></tr></table></div></figure>


<p>Here we&rsquo;ve nested our template in an <code>unless</code> block to handle showing
the form and madlibs texts when appropriate. We also added the reset button,
but the test is still failing because <code>resetStory</code> isn&rsquo;t handled by the controller.</p>

<p>Add a test for <code>resetStory</code>:</p>

<figure class='code'><figcaption><span>index-test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// truncated</span>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;resetStory changes finishedStory to false&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">controller</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">subject</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">controller</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;showStory&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">controller</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;resetStory&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">controller</span><span class="p">.</span><span class="nx">finishedStory</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">test</span><span class="p">(</span><span class="s1">&#39;resetStory resets ctrl attrs&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">controller</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">subject</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">controller</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;evan&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">controller</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;showStory&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">controller</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="s1">&#39;resetStory&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">equal</span><span class="p">(</span><span class="nx">controller</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">),</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also added a test to be sure that <code>resetStory</code> clears the <code>name</code> property
if it was set when the user filled out the form. We should probably be testing
all of the form values to be sure that they are reset, but I don&rsquo;t know
any easy way to do that without typing them all out.</p>

<p>Update the controller to make the test pass:</p>

<figure class='code'><figcaption><span>index.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Controller</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">finishedStory</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">showStory</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;finishedStory&#39;</span><span class="p">,</span> <span class="kc">true</span><span class="p">);</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">resetStory</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;finishedStory&#39;</span><span class="p">,</span> <span class="kc">false</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;animal&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;name&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;corp&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;jsFramework&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">&#39;emo-adj&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Manually resetting all properties like that is probably not the best way to
clear the form, but this will be refactored later when we start using local storage.</p>

<p>And with that the first iteration of the madlibs app is complete! Obviously
ember can do a whole lot more, but I find it&rsquo;s often easier to start small.</p>

<p>The key takeaway for me is how easy it is to setup both integration and unit tests
with qUnit. The docs for qunit leave a lot to be desired, and the matchers
are lacking, but we wrote very very little code and got feedback super fast.
This is definately a much easier way to do red-green-refactor than depending on
slow selenium tests.</p>

<p>Next, I&rsquo;ll switch over to using local storage and move the form and story
to different templates &mdash; and maybe add some styling so it doesn&rsquo;t look like
complete crap. Checkout <a href="https://github.com/evan-007/EmberMadlibs/tree/4192796646a58e285e15b477980e2049770959b1">this commit</a> for the finished app up to this point.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ember Devise Simple Auth]]></title>
    <link href="http://evan-007.github.io/blog/2014/11/16/ember-devise-simple-auth/"/>
    <updated>2014-11-16T20:23:15-05:00</updated>
    <id>http://evan-007.github.io/blog/2014/11/16/ember-devise-simple-auth</id>
    <content type="html"><![CDATA[<p>Setting up Ember Simple Auth Devise for registrations and auto-login.<!--more--></p>

<p><a href="https://github.com/simplabs/ember-simple-auth/tree/master/packages/ember-simple-auth-devise">Ember simple auth</a> is a great little library for making ember cli aps work with Devise. It&rsquo;s very basic and so makes no assumptions about how to register accounts &ndash;> it only cares about setting sessions. Here&rsquo;s how I got signup + login after signing up to work (although a bit hacky and not production ready).</p>

<p>First, follow the tutorial on Ember Simple Auth&rsquo;s github to get sessions working.</p>

<p>Now, we want to add user signup + create a session after the registration.</p>

<p>If you namespaced your rails API, you may need to extend devise&rsquo;s routing to fit within your namespace, since Ember simple auth asks you to work in the basic namespace.</p>

<figure class='code'><figcaption><span>routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="n">devise_for</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">controllers</span><span class="p">:</span> <span class="p">{</span> <span class="ss">sessions</span><span class="p">:</span> <span class="s1">&#39;sessions&#39;</span> <span class="p">}</span>
</span><span class='line'>  <span class="c1"># hack for ember data</span>
</span><span class='line'>  <span class="n">devise_scope</span> <span class="ss">:user</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">post</span> <span class="s1">&#39;api/v1/users&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;registrations#create&#39;</span><span class="p">,</span> <span class="ss">as</span><span class="p">:</span> <span class="ss">:whatever</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, create a new controller that inherits from <code>Devise::RegistrationsController</code>
and customize <code>create</code> to return the info needed to make an auth request (most of this is just from <a href="https://github.com/plataformatec/devise/blob/master/app/controllers/devise/registrations_controller.rb">devise&rsquo;s docs</a>)</p>

<figure class='code'><figcaption><span>registrations_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RegistrationsController</span> <span class="o">&lt;</span> <span class="ss">Devise</span><span class="p">:</span><span class="ss">:RegistrationsController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>    <span class="n">build_resource</span><span class="p">(</span><span class="n">sign_up_params</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">resource_saved</span> <span class="o">=</span> <span class="n">resource</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>    <span class="k">yield</span> <span class="n">resource</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">resource_saved</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">active_for_authentication?</span>
</span><span class='line'>        <span class="n">set_flash_message</span> <span class="ss">:notice</span><span class="p">,</span> <span class="ss">:signed_up</span> <span class="k">if</span> <span class="n">is_flashing_format?</span>
</span><span class='line'>        <span class="n">sign_up</span><span class="p">(</span><span class="n">resource_name</span><span class="p">,</span> <span class="n">resource</span><span class="p">)</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span><span class="ss">user</span><span class="p">:</span> <span class="p">{</span><span class="ss">email</span><span class="p">:</span> <span class="n">resource</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="n">resource</span><span class="o">.</span><span class="n">password</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="n">resource</span><span class="o">.</span><span class="n">id</span><span class="p">}}</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="n">set_flash_message</span> <span class="ss">:notice</span><span class="p">,</span> <span class="ss">:&quot;signed_up_but_</span><span class="si">#{</span><span class="n">resource</span><span class="o">.</span><span class="n">inactive_message</span><span class="si">}</span><span class="ss">&quot;</span> <span class="k">if</span> <span class="n">is_flashing_format?</span>
</span><span class='line'>        <span class="n">expire_data_after_sign_in!</span>
</span><span class='line'>        <span class="n">respond_with</span> <span class="n">resource</span><span class="p">,</span> <span class="ss">location</span><span class="p">:</span> <span class="n">after_inactive_sign_up_path_for</span><span class="p">(</span><span class="n">resource</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">clean_up_passwords</span> <span class="n">resource</span>
</span><span class='line'>      <span class="vi">@validatable</span> <span class="o">=</span> <span class="n">devise_mapping</span><span class="o">.</span><span class="n">validatable?</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@validatable</span>
</span><span class='line'>        <span class="vi">@minimum_password_length</span> <span class="o">=</span> <span class="n">resource_class</span><span class="o">.</span><span class="n">password_length</span><span class="o">.</span><span class="n">min</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">:json</span><span class="o">=&gt;</span> <span class="p">{</span> <span class="ss">:token</span><span class="o">=&gt;</span><span class="n">resource</span><span class="o">.</span><span class="n">authentication_token</span><span class="p">,</span> <span class="ss">:email</span><span class="o">=&gt;</span><span class="n">resource</span><span class="o">.</span><span class="n">email</span> <span class="p">},</span> <span class="ss">:status</span><span class="o">=&gt;</span><span class="mi">201</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important part is in the first <code>if</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">if</span> <span class="n">resource_saved</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">resource</span><span class="o">.</span><span class="n">active_for_authentication?</span>
</span><span class='line'>    <span class="n">set_flash_message</span> <span class="ss">:notice</span><span class="p">,</span> <span class="ss">:signed_up</span> <span class="k">if</span> <span class="n">is_flashing_format?</span>
</span><span class='line'>    <span class="n">sign_up</span><span class="p">(</span><span class="n">resource_name</span><span class="p">,</span> <span class="n">resource</span><span class="p">)</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="p">{</span><span class="ss">user</span><span class="p">:</span> <span class="p">{</span><span class="ss">email</span><span class="p">:</span> <span class="n">resource</span><span class="o">.</span><span class="n">email</span><span class="p">,</span> <span class="ss">password</span><span class="p">:</span> <span class="n">resource</span><span class="o">.</span><span class="n">password</span><span class="p">,</span> <span class="nb">id</span><span class="p">:</span> <span class="n">resource</span><span class="o">.</span><span class="n">id</span><span class="p">}}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re forcing devise to return the user&rsquo;s details in json for ember <code>render json: {user: {email: resource.email, password: resource.password, id: resource.id}}</code>.</p>

<p>Bouncing back the user&rsquo;s password is a terrible idea, don&rsquo;t do this except for demo purposes!</p>

<h1>Setting up ember</h1>

<p>Ember CLI will do all the hard work <code>ember g resource user email:string password:string passwordConfirmation:string</code>. That gets the model, now do <code>ember g route users/new</code>.</p>

<p>In the route throw a hook to create a new user and then drop a form partial in the template:</p>

<figure class='code'><figcaption><span>app/routes/users/new.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">Route</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">model</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">store</span><span class="p">.</span><span class="nx">createRecord</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/templates/users/-form.hbs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;h2&gt;</span>Create an Account<span class="nt">&lt;/h2&gt;</span>
</span><span class='line'><span class="nt">&lt;form</span> <span class="err"></span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label&gt;</span>Email<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label&gt;</span>Password Confirmation<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">value=</span><span class="s">&quot;Sign Up!&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/templates/users/new.hbs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'>  
</span></code></pre></td></tr></table></div></figure>


<p>Finally, the tricky part: getting the ember controller to register the user and then authenticate them: <code>ember g controller users/new</code>.</p>

<figure class='code'><figcaption><span>app/controllers/users/new.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kr">import</span> <span class="nx">Ember</span> <span class="nx">from</span> <span class="s1">&#39;ember&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">export</span> <span class="k">default</span> <span class="nx">Ember</span><span class="p">.</span><span class="nx">ObjectController</span><span class="p">.</span><span class="nx">extend</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">authenticator</span><span class="o">:</span> <span class="s1">&#39;simple-auth-authenticator:devise&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">actions</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">save</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;model&#39;</span><span class="p">).</span><span class="nx">save</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">resp</span><span class="p">){</span>
</span><span class='line'>         <span class="nx">_this</span><span class="p">.</span><span class="nx">transitionToRoute</span><span class="p">(</span><span class="s1">&#39;index&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">_this</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;session&#39;</span><span class="p">).</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;simple-auth-authenticator:devise&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>          <span class="nx">identification</span><span class="o">:</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">_data</span><span class="p">.</span><span class="nx">email</span><span class="p">,</span>
</span><span class='line'>          <span class="nx">password</span><span class="o">:</span> <span class="nx">resp</span><span class="p">.</span><span class="nx">_data</span><span class="p">.</span><span class="nx">password</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>So here the user is saved and then we reroute to the app&rsquo;s index on success.
Remember that rails is returning all the data we need to authenticate the user, so
we simply pass in the required params to <code>.authenticate</code>. Most of this came from simple auth&rsquo;s <a href="https://github.com/simplabs/ember-simple-auth/issues?page=1&amp;q=devise">issue tracker</a> but I can&rsquo;t find the exact link again. Because we&rsquo;re using ember data, the server response is stuffed in <code>_data</code>.</p>

<p>This is a terrible implementation for many reasons, including returning the user&rsquo;s auth info (maybe https helps out, but still it&rsquo;s a bad idea) and making a second http call AFTER the user is registered to authenticate them. Ideally, we could just return the token from devise and set the appropriate cookie/headers in Ember, but I&rsquo;m not sure how to do that with simple auth yet.</p>

<p>Don&rsquo;t do this in production.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[More Rails Refactoring]]></title>
    <link href="http://evan-007.github.io/blog/2014/09/22/more-rails-refactoring/"/>
    <updated>2014-09-22T17:06:33-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/09/22/more-rails-refactoring</id>
    <content type="html"><![CDATA[<p>Refactoring a Rails Class to be more Metz-y: ideas from Sandy Metz&#8217; POODR in rails.</p>

<!--more-->


<p>Imagine a multi-user application with a messaging system that allows
users to communicate with each other. One of the main issues is that there
needs to be a way to restrict which users can message which users so that
people aren&rsquo;t overrun with spam.</p>

<p>One simple control is to only allow users who are <code>friends</code> to send each other messages.
One way to implement this is to throw a <code>before_action</code> on <code>Messages#create</code>:</p>

<figure class='code'><figcaption><span>messages_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:friend_check</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:create</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># bunch of stuff</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">friend_check</span>
</span><span class='line'>      <span class="k">if</span> <span class="no">FriendVerifier</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>        <span class="o">.</span><span class="n">friend_check</span><span class="p">(</span><span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:message</span><span class="o">][</span><span class="ss">:receiver_id</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="kp">false</span>
</span><span class='line'>          <span class="n">render</span> <span class="ss">nothing</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">400</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>friend_verifier.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FriendVerifier</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">friend_check</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="vi">@sender_id</span><span class="p">,</span> <span class="n">friend_id</span><span class="p">:</span> <span class="vi">@receiver_id</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span> <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="vi">@receiver_id</span><span class="p">,</span> <span class="n">friend_id</span><span class="p">:</span> <span class="vi">@sender_id</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>friend_check</code> queries the DB, returns <code>true</code> if the users are friends and the controller
will either let the action continue or <code>return status: 400</code>, which is what our imaginary angular API can
work with.</p>

<p>But! What happens when users can now message users who are NOT friends, but who have
posted <code>Postings</code> asking for help?</p>

<p>The controller <code>before_action</code> gets more arguments:</p>

<figure class='code'><figcaption><span>message_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1">#omitted</span>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">can_message?</span>
</span><span class='line'>      <span class="k">if</span> <span class="no">FriendVerifier</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">check</span><span class="p">(</span><span class="n">current_user</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:message</span><span class="o">][</span><span class="ss">:receiver_id</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>         <span class="vi">@reply</span><span class="p">,</span> <span class="n">params</span><span class="o">[</span><span class="ss">:posting_id</span><span class="o">]</span><span class="p">)</span> <span class="o">==</span> <span class="kp">false</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">nothing</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">401</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And <code>FriendVerifier</code> gets bigger:</p>

<figure class='code'><figcaption><span>friend_verifier.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">FriendVerifier</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">id1</span><span class="p">,</span> <span class="n">id2</span><span class="p">,</span> <span class="n">reply</span><span class="p">,</span> <span class="o">*</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">reply</span> <span class="o">==</span> <span class="s1">&#39;false&#39;</span>
</span><span class='line'>      <span class="k">if</span> <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">id1</span><span class="p">,</span> <span class="n">friend_id</span><span class="p">:</span> <span class="n">id2</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span> <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">id2</span><span class="p">,</span> <span class="n">friend_id</span><span class="p">:</span> <span class="n">id1</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>        <span class="kp">true</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">reply</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span>
</span><span class='line'>      <span class="k">if</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">id2</span><span class="p">)</span><span class="o">.</span><span class="n">postings</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="nb">id</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>        <span class="kp">true</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="kp">false</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s pretty awful and unreadable. One approach could be to have a master <code>MessageGuard</code> class
that then calls the appropriate validator classes:</p>

<figure class='code'><figcaption><span>message_guard.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MessageGuard</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">check</span><span class="p">(</span><span class="n">id1</span><span class="p">,</span> <span class="n">id2</span><span class="p">,</span> <span class="n">reply</span><span class="p">,</span> <span class="o">*</span><span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">reply</span> <span class="o">==</span> <span class="s1">&#39;false&#39;</span>
</span><span class='line'>      <span class="no">FriendVerifier</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span><span class="n">id1</span><span class="p">,</span> <span class="n">id2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">reply</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span>
</span><span class='line'>      <span class="no">PostingVerifier</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">verify</span><span class="p">(</span><span class="n">id2</span><span class="p">,</span> <span class="nb">id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s okay, but it creates two new classes <code>FriendVerifier</code> and <code>PostingVerifier</code>.
Are they really necessary, or can the scope of message verification be handled by
just one <code>Verifier</code> class?</p>

<figure class='code'><figcaption><span>verifier.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Verifier</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">friends?</span><span class="p">(</span><span class="n">id1</span><span class="p">,</span> <span class="n">id2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">id1</span><span class="p">,</span> <span class="n">friend_id</span><span class="p">:</span> <span class="n">id2</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span>
</span><span class='line'>        <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="n">id2</span><span class="p">,</span> <span class="n">friend_id</span><span class="p">:</span> <span class="n">id1</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">active_post?</span><span class="p">(</span><span class="nb">id</span><span class="p">,</span> <span class="n">posting_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="nb">id</span><span class="p">)</span><span class="o">.</span><span class="n">postings</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="n">posting_id</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">message_guard</span><span class="p">(</span><span class="n">id1</span><span class="p">,</span> <span class="n">id2</span><span class="p">,</span> <span class="n">reply</span><span class="p">,</span> <span class="o">*</span><span class="n">posting_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">reply</span> <span class="o">==</span> <span class="s1">&#39;false&#39;</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">friends?</span><span class="p">(</span><span class="n">id1</span><span class="p">,</span> <span class="n">id2</span><span class="p">)</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="n">reply</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">active_post?</span><span class="p">(</span><span class="n">id1</span><span class="p">,</span> <span class="n">posting_id</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>I like this design: handling all of the verifications in one place and then
refactoring them into smaller classes if/when that&rsquo;s needed. However, there is still
one big problem with <code>Verifier</code>: the way it and its methods take arguments is real messy.</p>

<p>The class could be initialized with all 4 possible arguments, but there may be
cases when only the <code>friends?</code> method is needed.</p>

<p>One way is to do a Sandy Metz-style hash of arguments to initialize the class and also
rename the arguments so that they are a bit more meaningful:</p>

<figure class='code'><figcaption><span>verifier.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Verifier</span>
</span><span class='line'>  <span class="kp">attr_reader</span> <span class="ss">:id1</span><span class="p">,</span> <span class="ss">:id2</span><span class="p">,</span> <span class="ss">:reply</span><span class="p">,</span> <span class="ss">:posting_id</span><span class="p">,</span> <span class="ss">:type</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Sandy Metz style!</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@sender_id</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:sender_id</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@receiver_id</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:receiver_id</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@reply</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:reply</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@posting_id</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:posting_id</span><span class="o">]</span>
</span><span class='line'>    <span class="vi">@type</span> <span class="o">=</span> <span class="n">args</span><span class="o">[</span><span class="ss">:type</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">friends?</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="vi">@sender_id</span><span class="p">,</span> <span class="n">friend_id</span><span class="p">:</span> <span class="vi">@receiver_id</span><span class="p">)</span><span class="o">.</span><span class="n">first</span> <span class="o">||</span>
</span><span class='line'>        <span class="no">Friendship</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">user_id</span><span class="p">:</span> <span class="vi">@receiver_id</span><span class="p">,</span> <span class="n">friend_id</span><span class="p">:</span> <span class="vi">@sender_id</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">active_post?</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="vi">@receiver_id</span><span class="p">)</span><span class="o">.</span><span class="n">postings</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="nb">id</span><span class="p">:</span> <span class="vi">@posting_id</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>      <span class="kp">true</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">message_guard</span>
</span><span class='line'>  <span class="c1"># use strings, not booleans because JSON input</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@reply</span> <span class="o">==</span> <span class="s1">&#39;false&#39;</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">friends?</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vi">@reply</span> <span class="o">==</span> <span class="s1">&#39;true&#39;</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">active_post?</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="kp">false</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now <code>Verifier</code> doesn&rsquo;t depend on being initialized with 4 different args and thus
is more reusable (can use <code>#friends?</code> without needing <code>args[:posting_id]</code> and
  hopefully much more readable than the original version)!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Protractor Testing]]></title>
    <link href="http://evan-007.github.io/blog/2014/09/11/protractor-testing/"/>
    <updated>2014-09-11T07:33:52-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/09/11/protractor-testing</id>
    <content type="html"><![CDATA[<p>Helpers, matchers and fun stuff for protractor e2e testing in Angular. <!--more--></p>

<h2>Run one spec only</h2>

<p>By default <code>protractor protractorConfig.js</code> will run all the specs. Run just one:
<code>protractor protractorConfig.js --specs path/to/mySpec.js</code>. Use <code>iit</code> or <code>xit</code> instead of <code>it</code> to
run only one or skip a test in a file.</p>

<h2>Test helpers</h2>

<p>If there is common behavior in <code>beforeEach</code> or <code>afterEach</code> blocks, refactor it
into a helper:</p>

<figure class='code'><figcaption><span>test/e2e/helpers/signin.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">login</span><span class="o">:</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">emailInput</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;signin.email&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">passwordInput</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;signin.password&#39;</span><span class="p">));</span>
</span><span class='line'>    <span class="nx">submitButton</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">name</span><span class="p">(</span><span class="s1">&#39;SigninButton&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    <span class="nx">browser</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/#signin&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">emailInput</span><span class="p">.</span><span class="nx">sendKeys</span><span class="p">(</span><span class="s1">&#39;test@test.com&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">passwordInput</span><span class="p">.</span><span class="nx">sendKeys</span><span class="p">(</span><span class="s1">&#39;password&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">submitButton</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then use it in some other spec like this (the relevant part is in the <code>beforeEach</code>):</p>

<figure class='code'><figcaption><span>test/e2e/blog/newPostSpec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">helper</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;../helpers/signinHelper&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;Adding friends&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">helper</span><span class="p">.</span><span class="nx">login</span><span class="p">();</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;users can request any user to be their friend&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="c1">//do something</span>
</span><span class='line'>    <span class="nx">expect</span><span class="p">(</span><span class="nx">something</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;working&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Be sure that the helpers are added to <code>exclude</code> in <code>protractorConfig.js</code> or else
they will be run as if they were regular specs.</p>

<p>Unfortunately, the selenium instance from this test will persist for any specs
run before or after it. This means that sessions/any cookie data will still be
around. It could be managed with a <code>logout</code> helper, but you can just clear
cookies like this:</p>

<figure class='code'><figcaption><span>sometest.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="nx">afterEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">browser</span><span class="p">.</span><span class="nx">manage</span><span class="p">().</span><span class="nx">deleteAllCookies</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Matchers</h2>

<figure class='code'><figcaption><span>protractorStuff.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">//find by angular binding</span>
</span><span class='line'><span class="nx">emailInput</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="s1">&#39;signin.email&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//find by element name</span>
</span><span class='line'><span class="c1">//this is far easier than getting css matchers to find the right element</span>
</span><span class='line'><span class="nx">submitButton</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">name</span><span class="p">(</span><span class="s1">&#39;SigninButton&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//find by css</span>
</span><span class='line'><span class="nx">bluePill</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;.blue-pill&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//NOTE!</span>
</span><span class='line'><span class="c1">//multiple css classes need to be seperated by `.` to work</span>
</span><span class='line'><span class="c1">//ie:</span>
</span><span class='line'><span class="nx">icon</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;.fa.fa-newspaper-o.fa-3x&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//this will always fail:</span>
</span><span class='line'><span class="nx">icon</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">css</span><span class="p">(</span><span class="s1">&#39;.fa fa-newspaper-o fa-3x&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>Get an array of bindings from ng-repeat. This is very useful when adding a new item to
some scope and you need to check that it is contained in ng-repeat:</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;li</span> <span class="na">ng-repeat=</span><span class="s">&#39;user in users&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  
</span><span class='line'><span class="nt">&lt;/li&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Protractor has an easy method to get the <code>repeater</code>, but that only returns an
array of promises. Use <code>map</code> to get an array of values:</p>

<figure class='code'><figcaption><span>userSpec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">users</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">repeater</span><span class="p">(</span><span class="s1">&#39;user in users&#39;</span><span class="p">).</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;user.username&#39;</span><span class="p">)).</span><span class="nx">map</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">element</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">element</span><span class="p">.</span><span class="nx">getText</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//then use it in a matcher</span>
</span><span class='line'><span class="nx">expect</span><span class="p">(</span><span class="nx">users</span><span class="p">).</span><span class="nx">toContain</span><span class="p">(</span><span class="s1">&#39;someUsername&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>You cannot use <code>sendKeys</code> with OSX keys like <code>command</code> in order to copy/paste/delete text
in Selenium. Instead, use javascript to clear:</p>

<figure class='code'><figcaption><span>deleteSpec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">newTitle</span> <span class="o">=</span> <span class="s1">&#39;edited title&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">titleInput</span> <span class="o">=</span> <span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">name</span><span class="p">(</span><span class="s1">&#39;edit-title&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="nx">titleInput</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">titleInput</span><span class="p">.</span><span class="nx">sendKeys</span><span class="p">(</span><span class="nx">newTitle</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>When clicking elements within a repeater, be as specific as possible to avoid weird
behavior:</p>

<figure class='code'><figcaption><span>someTest.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// this will act strange</span>
</span><span class='line'><span class="c1">// who knows what it actually clicks on</span>
</span><span class='line'>
</span><span class='line'><span class="nx">link</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">repeater</span><span class="p">(</span><span class="s1">&#39;item in stuff&#39;</span><span class="p">)).</span><span class="nx">first</span><span class="p">();</span>
</span><span class='line'><span class="nx">link</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// better, more specific</span>
</span><span class='line'>
</span><span class='line'><span class="nx">link</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">repeater</span><span class="p">(</span><span class="s1">&#39;item in things&#39;</span><span class="p">).</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;item.name&#39;</span><span class="p">)).</span><span class="nx">first</span><span class="p">();</span>
</span><span class='line'><span class="nx">link</span><span class="p">.</span><span class="nx">click</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>When working with <code>ng-show</code> or <code>ng-if</code>, use <code>expect(element.isDisplayed()).toBe(false)</code>
instead of <code>expect(element.isPresent()).toBe(false)</code> because the latter returns
<code>true</code> if the element is present on the template, even when the element is NOT displayed!</p>

<p>If the initial selenium load is so slow that a spec fails due to timeout: <code>A Jasmine spec timed out. Resetting the WebDriver Control Flow.</code>,
give it more time by adding <code>jasmineNodeOpts: {defaultTimeoutInterval: timeout_in_millis}</code> to <code>protractorConfig.js</code></p>

<p>Don&rsquo;t use locators with callbacks when their elements are not present on the screen. Best practices
say to put your page elements in one place, at the start of the test, to maintain readability.
However, be careful using locators with callbacks:</p>

<figure class='code'><figcaption><span>someSpec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">firstPending</span> <span class="o">=</span> <span class="nx">pendingList</span><span class="p">.</span><span class="nx">first</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">elem</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">elem</span><span class="p">.</span><span class="nx">element</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">binding</span><span class="p">(</span><span class="s1">&#39;user.username&#39;</span><span class="p">)).</span><span class="nx">getText</span><span class="p">()</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>If this block is called when <code>pendingList</code> is not on the screen, it will throw an
error in the test. To fix, only call when the element is on the screen OR refactor
to avoid the callback:</p>

<figure class='code'><figcaption><span>noCallBacks.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">firstPending</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">all</span><span class="p">(</span><span class="nx">by</span><span class="p">.</span><span class="nx">repeater</span><span class="p">(</span><span class="s1">&#39;user in activeUsers&#39;</span><span class="p">).</span><span class="nx">column</span><span class="p">(</span><span class="s1">&#39;user.username&#39;</span><span class="p">)).</span><span class="nx">first</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// later in the test</span>
</span><span class='line'><span class="nx">firstPending</span><span class="p">.</span><span class="nx">getText</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Working with select forms <code>element(by.cssContainingText('option', '1test')).click();</code>
where <code>1test</code> is the value to select.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON With Rails Booleans]]></title>
    <link href="http://evan-007.github.io/blog/2014/09/09/json-with-rails-booleans/"/>
    <updated>2014-09-09T12:50:12-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/09/09/json-with-rails-booleans</id>
    <content type="html"><![CDATA[<p>Rails boolean best practices vs JSON <!--more--></p>

<p>In rails, it&rsquo;s a best practice to end boolean DB columns with a <code>?</code>, like:
<code>user.is_awesome? # false</code>. This can cause issues with JS frontends like angular.</p>

<p>Given a directive/view like with some <code>ng-if</code> around a boolean with a terminal <code>?</code>:</p>

<figure class='code'><figcaption><span>some.directive.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p</span> <span class="na">ng-if=</span><span class="s">&#39;activeUser.awesome? == true&#39;</span> <span class="na">class=</span><span class="s">&#39;text-success&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  Wow, you&#39;re so great!
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Angular will freakout and break because of <code>activeUser.awesome?</code>. It&rsquo;s confusing
because looking at the <code>response.body</code> in chrome&rsquo;s dev tools will show <code>"awesome?" : false</code>,
which led me to believe that the <code>?</code> wasn&rsquo;t the problem.</p>

<p>To fix this issue, use JSON&rsquo;s <code>[]</code> syntax like: <code>activeUser["awesome?"]</code>
and it&rsquo;ll work correctly.</p>

<figure class='code'><figcaption><span>some.directive.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;p</span> <span class="na">ng-if=</span><span class="s">&#39;activeUser[&quot;awesome?&quot;] == true&#39;</span> <span class="na">class=</span><span class="s">&#39;text-success&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  Wow, you&#39;re so great!
</span><span class='line'><span class="nt">&lt;/p&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Realtime Angular-rails Form Validations]]></title>
    <link href="http://evan-007.github.io/blog/2014/09/08/ng-messages-and-rails/"/>
    <updated>2014-09-08T08:59:44-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/09/08/ng-messages-and-rails</id>
    <content type="html"><![CDATA[<p>Use ngMessages with <code>validates :username, uniqueness: true</code> in realtime.</p>

<!--more-->


<p>Displaying form errors in realtime in Angular is a hassle, but <code>ngMessages</code> in
v1.3 aims to make it much easier.
<a href='http://www.yearofmoo.com/2014/05/how-to-use-ngmessages-in-angularjs.html'>Year of Moo&rsquo;s</a>
excellent article covers <code>ngMessages</code> thoroughly, so here I&rsquo;ll just walkthrough
how I added asynchronous form validation with a rails backend.</p>

<h2>The gist</h2>

<p>Given a user model with <code>validates :username, presence: true, uniqueness: true</code>,
we&rsquo;d like to provide realtime feedback on these validations in the client application.
For example, if a user enters <code>evan</code> as their username and there&rsquo;s already an <code>evan</code>
in the database, the user shouldn&rsquo;t have to submit the form to find out that
they need to pick another name.</p>

<p>Validating <code>presence: true</code> is easy enough, but checking uniqueness is a bit tricky.
Luckily, this <a href='http://www.yearofmoo.com/2014/05/how-to-use-ngmessages-in-angularjs.html#custom-vaidations-and-error-messages'>article</a>
does all the hard work and we just need to integrate it with rails.</p>

<p>to sum up:
Create a directive that <code>POST</code> the relevant <code>ng-model</code> from the form&rsquo;s username input.
Rails checks if the username exists and returns a boolean value
Angular displays error messages based on the response.</p>

<h2>Rails implementation</h2>

<p>The easy part is the Rails side. This isn&rsquo;t very RESTful, but for our first pass,
let&rsquo;s add a <code>ValidationsController</code>. If the app requires other similar validations (like
  on emails), then we can just extend this controller.</p>

<figure class='code'><figcaption><span>spec/api/v1/validations_controller_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">RSpec</span><span class="o">.</span><span class="n">describe</span> <span class="ss">Api</span><span class="p">:</span><span class="ss">:V1</span><span class="o">::</span><span class="no">ValidationsController</span><span class="p">,</span> <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="ss">:controller</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">describe</span> <span class="s1">&#39;GET username&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">context</span> <span class="s1">&#39;when params[:username] match a DB record&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">before</span> <span class="k">do</span>
</span><span class='line'>        <span class="vi">@user</span> <span class="o">=</span> <span class="n">create</span><span class="p">(</span><span class="ss">:user</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>      <span class="n">it</span> <span class="s1">&#39;returns status 400&#39;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">get</span> <span class="ss">:username</span><span class="p">,</span> <span class="p">{</span> <span class="ss">username</span><span class="p">:</span> <span class="vi">@user</span><span class="o">.</span><span class="n">username</span> <span class="p">}</span>
</span><span class='line'>        <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">400</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the username already exists in the DB, then we&rsquo;ll return status 400, which
means that it was a <a href='http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html'>bad request</a>.
This may not be the best approach, but it saves us from having to render a response body.</p>

<p>To make it pass:</p>

<figure class='code'><figcaption><span>routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">get</span> <span class="s1">&#39;/validations/username&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;validations#username&#39;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>app/controllers/api/v1/validations_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Api</span><span class="o">::</span><span class="ss">V1</span><span class="p">:</span><span class="ss">:ValidationsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">username</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">username</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:username</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">nothing</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">400</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If the username is valid, let&rsquo;s return <code>status: 200</code>:</p>

<figure class='code'><figcaption><span>&#8230;./users_controller_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="c1">#truncated</span>
</span><span class='line'>  <span class="n">context</span> <span class="s1">&#39;when params[:username] do not match a DB record&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">it</span> <span class="s1">&#39;returns status 200&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">get</span> <span class="ss">:validator</span><span class="p">,</span> <span class="p">{</span> <span class="ss">username</span><span class="p">:</span> <span class="s1">&#39;imvalid&#39;</span> <span class="p">}</span>
</span><span class='line'>      <span class="n">expect</span><span class="p">(</span><span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="p">)</span><span class="o">.</span><span class="n">to</span> <span class="n">eq</span> <span class="mi">200</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And to pass:</p>

<figure class='code'><figcaption><span>/validations_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="k">def</span> <span class="nf">username</span>
</span><span class='line'>    <span class="k">if</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">username</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:username</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">nothing</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">400</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">render</span> <span class="ss">nothing</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">200</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Client side messages</h2>

<p>As per the <a href='http://www.yearofmoo.com/2014/05/how-to-use-ngmessages-in-angularjs.html#custom-vaidations-and-error-messages'>article</a>
we&rsquo;ll add a directive attribute that will handle server communication and add the
relevant error messages. Here it is with a few changes:</p>

<figure class='code'><figcaption><span>validator.directive.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;ppApp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;recordAvailabilityValidator&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">require</span> <span class="o">:</span> <span class="s1">&#39;ngModel&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">link</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">ngModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">recordAvailabilityValidator</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">setAsLoading</span><span class="p">(</span><span class="nx">bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ngModel</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">&#39;recordLoading&#39;</span><span class="p">,</span> <span class="o">!</span><span class="nx">bool</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="kd">function</span> <span class="nx">setAsAvailable</span><span class="p">(</span><span class="nx">bool</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">ngModel</span><span class="p">.</span><span class="nx">$setValidity</span><span class="p">(</span><span class="s1">&#39;recordAvailable&#39;</span><span class="p">,</span> <span class="nx">bool</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">ngModel</span><span class="p">.</span><span class="nx">$parsers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">value</span> <span class="o">||</span> <span class="nx">value</span><span class="p">.</span><span class="nx">length</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="k">return</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">setAsLoading</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">setAsAvailable</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">apiUrl</span><span class="p">,</span> <span class="p">{</span> <span class="nx">params</span><span class="o">:</span> <span class="p">{</span><span class="nx">username</span> <span class="o">:</span> <span class="nx">value</span> <span class="p">}}</span> <span class="p">)</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">setAsLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">setAsAvailable</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
</span><span class='line'>          <span class="p">})</span>
</span><span class='line'>          <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">setAsLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">setAsAvailable</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
</span><span class='line'>          <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notes on my changes:
&ndash; removed that weird array syntax for dependencies as I prefer to let a gulp task
deal with that
&ndash; adjusted the <code>$http.get</code> to pass in <code>username</code> as an optional <code>param</code></p>

<p>And then the form looks like this:</p>

<figure class='code'><figcaption><span>signup.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">novalidate</span> <span class="na">ngsubmit=</span><span class="s">&quot;submit(signup)&quot;</span> <span class="na">class=</span><span class="s">&#39;form-horizontal&#39;</span> <span class="na">name=</span><span class="s">&#39;signupForm&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;p&gt;</span>
</span><span class='line'>        <span class="nt">&lt;label&gt;</span>Username<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>        <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;text&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;signup.username&quot;</span> <span class="na">class=</span><span class="s">&#39;form-control&#39;</span> <span class="na">name=</span><span class="s">&#39;username&#39;</span>
</span><span class='line'>               <span class="na">require</span> <span class="na">minlength=</span><span class="s">&#39;3&#39;</span> <span class="na">record-availability-validator=</span><span class="s">&quot;/api/v1/validations/username&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>      <span class="nt">&lt;div</span> <span class="na">ng-messages=</span><span class="s">&quot;signupForm.username.$error&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">ng-message=</span><span class="s">&quot;required&quot;</span><span class="nt">&gt;</span>You did not enter a username<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">ng-message=</span><span class="s">&quot;minlength&quot;</span><span class="nt">&gt;</span>Username must be at least 4 characters<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">ng-message=</span><span class="s">&quot;recordLoading&quot;</span><span class="nt">&gt;</span>Checking database...<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>        <span class="nt">&lt;div</span> <span class="na">ng-message=</span><span class="s">&quot;recordAvailable&quot;</span><span class="nt">&gt;</span>The username is already in use.<span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>      <span class="c">&lt;!-- bunch of stuff --&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The important stuff:
<code>record-availability-validator</code> is our directive attribute on the <code>username</code> <code>input</code>
<code>ng-message</code> makes error display so much easier! Without it, we have to juggle scopes and <code>ng-if</code>s</p>

<p>Annnd that&rsquo;s it, we now have &lsquo;realtime&rsquo; validation updates. Demo <a href='http://tranquil-tor-7118.herokuapp.com/#/signup'>here</a>
and use the username <code>test</code> to throw an error.</p>

<p>Of course, this approach is already a bit outdated. There are now <a href='http://www.yearofmoo.com/2014/09/taming-forms-in-angularjs-1-3.html#asnychronous-validation-via-asyncvalidators'>$asyncValidators</a>
in angular 1.3-beta that blackboxes most of the directive behavior from this example.</p>

<p>This is what the refactored directive looks like:</p>

<figure class='code'><figcaption><span>validator.directive.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;ppApp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;recordAvailabilityValidator&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">require</span> <span class="o">:</span> <span class="s1">&#39;ngModel&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">link</span> <span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">attrs</span><span class="p">,</span> <span class="nx">ngModel</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">apiUrl</span> <span class="o">=</span> <span class="nx">attrs</span><span class="p">.</span><span class="nx">recordAvailabilityValidator</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">ngModel</span><span class="p">.</span><span class="nx">$asyncValidators</span><span class="p">.</span><span class="nx">recordAvailable</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">apiUrl</span><span class="p">,</span> <span class="p">{</span><span class="nx">params</span><span class="o">:</span> <span class="p">{</span><span class="nx">username</span><span class="o">:</span> <span class="nx">value</span><span class="p">}})</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular Backend Communication]]></title>
    <link href="http://evan-007.github.io/blog/2014/09/05/restangular/"/>
    <updated>2014-09-05T05:52:05-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/09/05/restangular</id>
    <content type="html"><![CDATA[<p>Options for working with a backend in Angular.js.<!--more--></p>

<p>AngularJS gives you freedom. Despite being labeled as a framework, I think of it
more as a collection of bits and pieces for hijacking HTML and less of a
&lsquo;framework for building web applications&rsquo; like Ember. Coming from the
convention-over-configuration mindset of Rails, Angular&rsquo;s blank canvas can be
both refreshing and daunting: want to put all of your js in one file? Go ahead!
In some ways, the lack of conventions can lead to unmaintainable messes.</p>

<p>On the other hand, the lack of conventions means the developer can make choices
that reflect both the needs of the project and, in some ways, the developer&rsquo;s own
personality.</p>

<h3>Back it up</h3>

<p>As cool as directives are, almost every app is going to need a backend. The simplest
choice is to use the internal <code>$http</code> and  <code>$q</code> services:</p>

<figure class='code'><figcaption><span>postService.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;postService&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">$q</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">defer</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/my/api/posts/&#39;</span><span class="o">+</span><span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">defer</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty basic, right? It&rsquo;s just a <code>get</code> request to the server with <code>$q</code> to handle
the asynchronicity(!).</p>

<p>But wait! This only handles one part of our RESTful <code>post</code>. What about <code>/posts</code>?
We could make another service, but we&rsquo;ve already got enough <code>.js</code> files to worry about.
Let&rsquo;s just extend <code>postService</code>:</p>

<figure class='code'><figcaption><span>postService.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;postService&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$http</span><span class="p">,</span> <span class="nx">$q</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">postService</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">all</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">defer</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/my/api/posts&#39;</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">defer</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">one</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">id</span><span class="p">){</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">defer</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;/my/api/posts/&#39;</span><span class="o">+</span><span class="nx">id</span><span class="p">).</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">response</span><span class="p">){</span>
</span><span class='line'>        <span class="nx">defer</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
</span><span class='line'>      <span class="p">})</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">postService</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we&rsquo;ve got a <code>postService</code> object that can do <code>postService.all</code> and <code>postService.one(8)</code>.</p>

<p>But wait! What about the <code>cud</code> in our Post CRUD? And what app has a <code>post</code> resource
without <code>user</code> and <code>comment</code>, too?</p>

<p>Rolling your own services to work with a backend is an interesting exercise, but
seems way too tedious for any non-trivial application. Luckily angular has <code>$resource</code>
to help out. <code>$resource</code> basically gives you an easy way to work with REST:</p>

<figure class='code'><figcaption><span>$resourceDocs</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'>  <span class="p">{</span> <span class="s1">&#39;get&#39;</span><span class="o">:</span>    <span class="p">{</span><span class="nx">method</span><span class="o">:</span><span class="s1">&#39;GET&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="s1">&#39;save&#39;</span><span class="o">:</span>   <span class="p">{</span><span class="nx">method</span><span class="o">:</span><span class="s1">&#39;POST&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="s1">&#39;query&#39;</span><span class="o">:</span>  <span class="p">{</span><span class="nx">method</span><span class="o">:</span><span class="s1">&#39;GET&#39;</span><span class="p">,</span> <span class="nx">isArray</span><span class="o">:</span><span class="kc">true</span><span class="p">},</span>
</span><span class='line'>    <span class="s1">&#39;remove&#39;</span><span class="o">:</span> <span class="p">{</span><span class="nx">method</span><span class="o">:</span><span class="s1">&#39;DELETE&#39;</span><span class="p">},</span>
</span><span class='line'>    <span class="s1">&#39;delete&#39;</span><span class="o">:</span> <span class="p">{</span><span class="nx">method</span><span class="o">:</span><span class="s1">&#39;DELETE&#39;</span><span class="p">}</span> <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s an improvement, but what if our resource has just one or two non-RESTful endpoints?
Or what if we need <code>PUT</code> requests? It&rsquo;s either back to <code>$http</code> and <code>$q</code> or
configuring every <code>$resource</code> service we make to support <code>PUT</code>.</p>

<h3>RESTangular</h3>

<p><a href='https://github.com/mgonto/restangular'>Restangular</a> is a wicked little
module that makes working with a backend painless. No more configuring promises or
adding custom <code>PUT</code> support! There&rsquo;s really no need for big services anymore!</p>

<figure class='code'><figcaption><span>routeExample.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$stateProvider</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$stateProvider</span><span class="p">.</span><span class="nx">state</span><span class="p">(</span><span class="s1">&#39;posts.one&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">url</span><span class="o">:</span> <span class="s1">&#39;/:id&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span> <span class="nx">Post</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Restangular</span><span class="p">,</span> <span class="nx">$stateParams</span><span class="p">){</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">Restangular</span><span class="p">.</span><span class="nx">one</span><span class="p">(</span><span class="s1">&#39;posts&#39;</span><span class="p">,</span> <span class="nx">$stateParams</span><span class="p">.</span><span class="nx">id</span><span class="p">).</span><span class="nx">get</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}},</span>
</span><span class='line'>    <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;ui/posts/index.html&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;postController&#39;</span>
</span><span class='line'>  <span class="p">})</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you&rsquo;ve setup a RESTful resource for <code>posts</code>, then Restangular will handle the
rest! For example, if the <code>Post</code> from <code>resolve</code> is injected into the controller,
it can easy be updated since it is a <code>Restangular</code> object:</p>

<figure class='code'><figcaption><span>postController.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;postController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Post</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">post</span> <span class="o">=</span> <span class="nx">Post</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">updatePost</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">post</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">//an ng-submit attribute in the view</span>
</span><span class='line'>    <span class="c1">//save comes from Restangular</span>
</span><span class='line'>    <span class="nx">post</span><span class="p">.</span><span class="nx">save</span><span class="p">()</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The full <a href="https://github.com/mgonto/restangular">docs</a> explain how to use Restangular
a lot better than I did here, but hopefully this gives decent explanation of why
it&rsquo;s worth using.</p>

<p>If you want complete controller over your backend communication, then maybe sticking
with <code>$http</code> and <code>$q</code> and building services manually is better. But, if you&rsquo;d rather
focus on shipping, Restangular is a job to work with and very actively developed.</p>

<p>With <code>ui.router</code> and <code>Restangular</code>, AngularJS starts to feel more like a framework
for building webapps and less like a collection of vaguely-related html-hijacking modules.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular Testing]]></title>
    <link href="http://evan-007.github.io/blog/2014/08/22/angular-testing/"/>
    <updated>2014-08-22T10:29:56-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/08/22/angular-testing</id>
    <content type="html"><![CDATA[<p>Testing angularJS with karma/jasmine.<!--more--></p>

<p><code>karma init</code> installs jasmine 1.3 by default, 2.0 has cleaner syntax for asynchronous tests, but doesn&rsquo;t support all of the same libraries.</p>

<h2>Testing an Asynchronous Service with Jasmine 2.0</h2>

<p>If there is a service that uses promises, like:</p>

<figure class='code'><figcaption><span>angular_factory.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myFactory&#39;</span><span class="p">,</span> <span class="p">[])</span>
</span><span class='line'><span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="s1">&#39;API_AUTH&#39;</span><span class="p">,</span> <span class="s1">&#39;&amp;username=demo&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">constant</span><span class="p">(</span><span class="s1">&#39;COUNTRIES_PATH&#39;</span><span class="p">,</span> <span class="s1">&#39;http://api.geonames.org/countryInfoJSON?&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;CountryData&#39;</span><span class="p">,</span> <span class="p">[</span> <span class="s1">&#39;API_AUTH&#39;</span><span class="p">,</span><span class="s1">&#39;$http&#39;</span><span class="p">,</span><span class="s1">&#39;$q&#39;</span><span class="p">,</span> <span class="s1">&#39;COUNTRIES_PATH&#39;</span><span class="p">,</span>
</span><span class='line'><span class="kd">function</span> <span class="p">(</span><span class="nx">API_AUTH</span><span class="p">,</span> <span class="nx">$http</span><span class="p">,</span> <span class="nx">$q</span><span class="p">,</span> <span class="nx">COUNTRIES_PATH</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">countryId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">defer</span> <span class="o">=</span> <span class="nx">$q</span><span class="p">.</span><span class="nx">defer</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$http</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">COUNTRIES_PATH</span> <span class="o">+</span> <span class="s1">&#39;&amp;country=&#39;</span> <span class="o">+</span> <span class="nx">countryId</span> <span class="o">+</span> <span class="nx">API_AUTH</span><span class="p">,</span> <span class="p">{</span> <span class="nx">cache</span><span class="o">:</span> <span class="kc">true</span> <span class="p">}).</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">defer</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">geonames</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">defer</span><span class="p">.</span><span class="nx">promise</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Any tests for this service will not resolve automatically because of the promise:</p>

<figure class='code'><figcaption><span>test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;myFactory&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;never finishes&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">inject</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">myService</span><span class="p">,</span> <span class="nx">$httpBackend</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">responseData</span> <span class="o">=</span> <span class="s1">&#39;hi&#39;</span>
</span><span class='line'>            <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">expectGET</span><span class="p">(</span><span class="sr">/http:\/\/\.api\.geonames\.com/</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="nx">responseData</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">myFactory</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>                <span class="nx">expect</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;I can write anything here because myFactory will never resolve&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test will never fail because <code>myFactory</code> never resolves. In jasmine 2.0 pass <code>done</code> into the <code>it</code> block and call it
to resolve the asyn call:</p>

<figure class='code'><figcaption><span>test.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;finishes&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">done</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">inject</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">myFactory</span><span class="p">,</span> <span class="nx">$httpBackend</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">responseData</span> <span class="o">=</span> <span class="s1">&#39;hi&#39;</span>
</span><span class='line'>        <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">expectGET</span><span class="p">(</span><span class="sr">/http:\/\/myServiceAPIcall\.com/</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="nx">responseData</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">myFactory</span><span class="p">().</span><span class="nx">then</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">expect</span><span class="p">(</span><span class="nx">data</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;it fails&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">done</span><span class="p">();</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test actually runs and fails because <code>myFactory</code> runs and returns <code>hi!</code>.</p>

<p><code>Done</code> is only in jasmine 2.0!!!!!</p>

<p><a href="http://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support">http://jasmine.github.io/2.0/introduction.html#section-Asynchronous_Support</a>
1.3 has a different and less intuitive syntax:
<a href="http://jasmine.github.io/1.3/introduction.html#section-Asynchronous_Support">http://jasmine.github.io/1.3/introduction.html#section-Asynchronous_Support</a></p>

<h4>Loose-coupling on urls</h4>

<p>Using the full URL path with <code>$httpBackend</code> couples the test to the code.</p>

<pre><code>$httpBackend.expectGET('http://api.geonames.com/someendpoint?&amp;username=demo&amp;country=AU').respond(responseData);
</code></pre>

<p>This approach works, but if the URL ever needs to change in the service, then the test must also change.
Instead, use a minimal regex:</p>

<pre><code>$httpBackend.expectGET(/http:\/\/geonames\.com\.com/).respond(responseData);
</code></pre>

<p>As long as the URL the service calls matches that regex, <code>$httpBackend</code> will respond appropriately. Now, if the api endpoint or URL params change, the test doesn&rsquo;t need to change.</p>

<h2>Routing tests</h2>

<p>Given a basic route like:</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;cc-app&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">config</span><span class="p">([</span><span class="s1">&#39;$routeProvider&#39;</span><span class="p">,</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">$routeProvider</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">$routeProvider</span><span class="p">.</span><span class="nx">when</span><span class="p">(</span><span class="s1">&#39;/countries/:id&#39;</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">templateUrl</span><span class="o">:</span> <span class="s1">&#39;./country/country.html&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">controller</span><span class="o">:</span> <span class="s1">&#39;countryCtrl&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">ActiveCountry</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;CountryData&#39;</span><span class="p">,</span> <span class="s1">&#39;$route&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">CountryData</span><span class="p">,</span> <span class="nx">$route</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">CountryData</span><span class="p">(</span><span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}]</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'><span class="p">}])</span>
</span></code></pre></td></tr></table></div></figure>


<p>An easy test would be:</p>

<figure class='code'><figcaption><span>app_spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;country.js&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">beforeEach</span><span class="p">(</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;cc-app&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should load the correct template and controller&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">inject</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$route</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">expect</span><span class="p">(</span><span class="nx">$route</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="s1">&#39;/countries/:id&#39;</span><span class="p">].</span><span class="nx">controller</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;countryCtrl&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">expect</span><span class="p">(</span><span class="nx">$route</span><span class="p">.</span><span class="nx">routes</span><span class="p">[</span><span class="s1">&#39;/countries/:id&#39;</span><span class="p">].</span><span class="nx">templateUrl</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;./country/country.html&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works, but it&rsquo;s not very good. If the app is reorganized, then any test like this will have to change because the paths in the <code>expect</code> won&rsquo;t match.</p>

<p>This test also isn&rsquo;t really testing anything other than the configurations &ndash; it doesn&rsquo;t load the route in the test block. A better test would actually load the route:</p>

<figure class='code'><figcaption><span>app_spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should load the correct template and controller&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="nx">inject</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$httpBackend</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$route</span><span class="p">){</span>
</span><span class='line'>        <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="s1">&#39;FR&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">expectGET</span><span class="p">(</span><span class="s1">&#39;/country.html&#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>            <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/countries/&#39;</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">flush</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">verifyNoOutstandingRequest</span><span class="p">();</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">controller</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;countryCtrl&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nx">expect</span><span class="p">(</span><span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">templateUrl</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;./country/country.html&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is nicer since it actually instantiates the route. We could also use a regex for the <code>templateUrl</code> to make the code easier to change later.</p>

<p>But this test has an asynchronous request problem: the service in the <code>resolve</code> block never resolves, so the will fail with an <code>unexpected request</code> from the route <code>resolve</code>. We could use <code>$httpBackend</code> and <code>done</code> like in the previous example, but since we&rsquo;ve already written a test for that service, does it really need to be tested again? And does this routing test even need to know that <code>resolve</code> calls an asynchronous function? An alternative would be to double it out with a <code>spy</code>.</p>

<p><a href="http://jasmine.github.io/2.0/introduction.html#section-Spies">http://jasmine.github.io/2.0/introduction.html#section-Spies</a></p>

<p>A spy is a double of a function. Instead of calling a function, the test will call the spy which can be created to behave like the function it replaces, but without the asynchronous call. In jasmine, there are matchers to confirm that the spy is behaving as it should.</p>

<p>In Jasmine spies are objects and so to properly double a function, it needs to be the method of some object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">fakeData</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">stuff</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">arg</span><span class="p">){</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">arg</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is just a plain old javascript object: <code>fakeData.stuff('whatever');</code></p>

<p>The spy is setup like this: <code>spyOn(fakeData, 'stuff');</code>. <code>spyOn</code> takes two arguments: the object and one of its properties. All this means is that jasmine is now paying attention to <code>fakeData.stuff</code>. The test now has access to the <code>toHaveBeenCalled()</code> matcher that verifies that the function was actually called in the test block.</p>

<p>The next step is to tell angular to use the spy in place of the function it doubles. <code>$provide</code> is how angular registers components to inject them into a module, so the code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">module</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$provide</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">$provide</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;CountryData&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">fakeData</span><span class="p">.</span><span class="nx">stuff</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>tells angular to use <code>fakeData.stuff</code> when the <code>CountryData</code> factory is called. Remember the <code>resolve</code> in the controller?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">resolve</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">ActiveCountry</span><span class="o">:</span> <span class="p">[</span><span class="s1">&#39;CountryData&#39;</span><span class="p">,</span> <span class="s1">&#39;$route&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">CountryData</span><span class="p">,</span> <span class="nx">$route</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">CountryData</span><span class="p">(</span><span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">params</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This resolve needs a function that takes one argument, which is exactly what <code>fakeData.stuff</code> will do. The return value of this factory doesn&rsquo;t matter so much since we&rsquo;re only testing the route: it&rsquo;s the controller&rsquo;s job to set <code>ActiveCountry</code> to the appropriate <code>scope</code>.</p>

<p>The full test looks like this:</p>

<figure class='code'><figcaption><span>app_spec.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">describe</span><span class="p">(</span><span class="s1">&#39;country.js&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">fakeData</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">stuff</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">arg</span><span class="p">){</span>
</span><span class='line'>            <span class="k">return</span> <span class="nx">arg</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">beforeEach</span><span class="p">(</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;cc-app&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">beforeEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">spyOn</span><span class="p">(</span><span class="nx">fakeData</span><span class="p">,</span> <span class="s1">&#39;stuff&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="nx">module</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$provide</span><span class="p">){</span>
</span><span class='line'>            <span class="nx">$provide</span><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;CountryData&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="k">return</span> <span class="nx">fakeData</span><span class="p">.</span><span class="nx">stuff</span><span class="p">;</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">it</span><span class="p">(</span><span class="s1">&#39;should load the correct template and controller&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>        <span class="nx">inject</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$httpBackend</span><span class="p">,</span> <span class="nx">$location</span><span class="p">,</span> <span class="nx">$rootScope</span><span class="p">,</span> <span class="nx">$route</span><span class="p">){</span>
</span><span class='line'>
</span><span class='line'>            <span class="kd">var</span> <span class="nx">id</span> <span class="o">=</span> <span class="s1">&#39;FR&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">expectGET</span><span class="p">(</span><span class="s1">&#39;./country/country.html&#39;</span><span class="p">).</span><span class="nx">respond</span><span class="p">(</span><span class="s1">&#39;...&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">$rootScope</span><span class="p">.</span><span class="nx">$apply</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>                <span class="nx">$location</span><span class="p">.</span><span class="nx">path</span><span class="p">(</span><span class="s1">&#39;/countries/&#39;</span> <span class="o">+</span> <span class="nx">id</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">flush</span><span class="p">();</span>
</span><span class='line'>            <span class="nx">$httpBackend</span><span class="p">.</span><span class="nx">verifyNoOutstandingRequest</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>            <span class="nx">expect</span><span class="p">(</span><span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">controller</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;countryCtrl&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">expect</span><span class="p">(</span><span class="nx">$route</span><span class="p">.</span><span class="nx">current</span><span class="p">.</span><span class="nx">templateUrl</span><span class="p">).</span><span class="nx">toBe</span><span class="p">(</span><span class="s1">&#39;./country/country.html&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="nx">expect</span><span class="p">(</span><span class="nx">fakeData</span><span class="p">.</span><span class="nx">stuff</span><span class="p">).</span><span class="nx">toHaveBeenCalledWith</span><span class="p">(</span><span class="nx">id</span><span class="p">);</span>
</span><span class='line'>            <span class="p">});</span>
</span><span class='line'>        <span class="p">});</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that instead of just <code>expect(fakeData.stuff).toHaveBeenCalled();</code> there is another matcher <code>toHaveBeenCalled()</code> that can verify that the correct arguments were also passed.</p>

<p>The first routing test only verified that the router was configured correctly. This much-improved version verifies that given the url <code>/countries/:id</code>, the router loads the correct controller and template AND passes the correct params from the url to <code>resolve</code> which then runs some function that takes those params as an argument.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Controller PORO Refactor]]></title>
    <link href="http://evan-007.github.io/blog/2014/08/19/refactor/"/>
    <updated>2014-08-19T05:31:04-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/08/19/refactor</id>
    <content type="html"><![CDATA[<p>Refactoring a big controller method into a plain old Ruby object to keep the
controller thin.</p>

<!--more-->


<p>Here&rsquo;s a <code>controller</code> method that&rsquo;s starting to get a little fat:</p>

<figure class='code'><figcaption><span>messages_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Api</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">V1</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>      <span class="n">before_action</span> <span class="ss">:signed_in?</span><span class="p">,</span> <span class="ss">:get_box</span><span class="p">,</span> <span class="ss">except</span><span class="p">:</span> <span class="o">[</span><span class="ss">:count</span><span class="o">]</span>
</span><span class='line'>      <span class="n">before_action</span> <span class="ss">:can_message?</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:create</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>        <span class="k">if</span> <span class="vi">@box</span><span class="o">.</span><span class="n">eql?</span> <span class="s2">&quot;inbox&quot;</span>
</span><span class='line'>          <span class="vi">@messages</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">received_messages</span>
</span><span class='line'>        <span class="k">elsif</span> <span class="vi">@box</span><span class="o">.</span><span class="n">eql?</span> <span class="s2">&quot;sentbox&quot;</span>
</span><span class='line'>          <span class="vi">@messages</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">sent_messages</span>
</span><span class='line'>        <span class="k">else</span>
</span><span class='line'>          <span class="vi">@messages</span> <span class="o">=</span> <span class="n">current_user</span><span class="o">.</span><span class="n">trashed_messages</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="kp">private</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">get_box</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:box</span><span class="o">].</span><span class="n">blank?</span> <span class="ow">or</span> <span class="o">![</span><span class="s2">&quot;inbox&quot;</span><span class="p">,</span><span class="s2">&quot;sentbox&quot;</span><span class="p">,</span><span class="s2">&quot;trash&quot;</span><span class="o">].</span><span class="n">include?params</span><span class="o">[</span><span class="ss">:box</span><span class="o">]</span>
</span><span class='line'>            <span class="n">params</span><span class="o">[</span><span class="ss">:box</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;inbox&#39;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>          <span class="vi">@box</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:box</span><span class="o">]</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>Index</code> renders a different set of messages is rendered depending on <code>params[:box]</code>.
It&rsquo;s not a terribly fat method, but it does have a bit of logic that could be encapsulated elsewhere to make
the controller more readable.</p>

<p>A simple solution is to use a plain old Ruby object:</p>

<figure class='code'><figcaption><span>models/mail_fetcher.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">MailFetcher</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">initialize</span><span class="p">(</span><span class="n">type</span><span class="p">,</span> <span class="n">user_id</span><span class="p">)</span>
</span><span class='line'>    <span class="vi">@type</span> <span class="o">=</span> <span class="n">type</span>
</span><span class='line'>    <span class="vi">@user_id</span> <span class="o">=</span> <span class="n">user_id</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">get</span>
</span><span class='line'>    <span class="k">if</span> <span class="vi">@type</span> <span class="o">==</span> <span class="s1">&#39;inbox&#39;</span>
</span><span class='line'>      <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="vi">@user_id</span><span class="p">)</span><span class="o">.</span><span class="n">received_messages</span>
</span><span class='line'>    <span class="k">elsif</span> <span class="vi">@type</span> <span class="o">==</span> <span class="s1">&#39;sentbox&#39;</span>
</span><span class='line'>      <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="vi">@user_id</span><span class="p">)</span><span class="o">.</span><span class="n">sent_messages</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="no">User</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="vi">@user_id</span><span class="p">)</span><span class="o">.</span><span class="n">trashed_messages</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then the <code>index</code> action cleans up to:</p>

<figure class='code'><figcaption><span>messages_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@messages</span> <span class="o">=</span> <span class="no">MailFetcher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@box</span><span class="p">,</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">get</span>
</span><span class='line'>  <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@messages</span><span class="p">,</span> <span class="ss">root</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="n">each_serializer</span><span class="p">:</span> <span class="no">MessageSerializer</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>leading to a simpler controller and an easy way to add this behavior elsewhere in
the application if needed. It&rsquo;s also easy to test this PORO.</p>

<p>Another optional step would be to move the call to <code>MailFetcher</code> into a <code>before_action</code>:</p>

<figure class='code'><figcaption><span>messages_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Api</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">V1</span>
</span><span class='line'>    <span class="k">class</span> <span class="nc">MessagesController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>      <span class="n">before_action</span> <span class="ss">:signed_in?</span><span class="p">,</span> <span class="ss">:get_box</span><span class="p">,</span> <span class="ss">except</span><span class="p">:</span> <span class="o">[</span><span class="ss">:count</span><span class="o">]</span>
</span><span class='line'>      <span class="n">before_action</span> <span class="ss">:can_message?</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:create</span><span class="o">]</span>
</span><span class='line'>      <span class="n">before_action</span> <span class="ss">:get_messages</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:index</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>        <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@messages</span><span class="p">,</span> <span class="ss">root</span><span class="p">:</span> <span class="kp">false</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="n">each_serializer</span><span class="p">:</span> <span class="no">MessageSerializer</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>      <span class="kp">private</span>
</span><span class='line'>        <span class="k">def</span> <span class="nf">get_box</span>
</span><span class='line'>          <span class="k">if</span> <span class="n">params</span><span class="o">[</span><span class="ss">:box</span><span class="o">].</span><span class="n">blank?</span> <span class="ow">or</span> <span class="o">![</span><span class="s2">&quot;inbox&quot;</span><span class="p">,</span><span class="s2">&quot;sentbox&quot;</span><span class="p">,</span><span class="s2">&quot;trash&quot;</span><span class="o">].</span><span class="n">include?params</span><span class="o">[</span><span class="ss">:box</span><span class="o">]</span>
</span><span class='line'>            <span class="n">params</span><span class="o">[</span><span class="ss">:box</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;inbox&#39;</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>          <span class="vi">@box</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:box</span><span class="o">]</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">def</span> <span class="nf">get_messages</span>
</span><span class='line'>          <span class="vi">@messages</span> <span class="o">=</span> <span class="no">MailFetcher</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vi">@box</span><span class="p">,</span> <span class="n">current_user</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">get</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Token Auth With Angular and Rails]]></title>
    <link href="http://evan-007.github.io/blog/2014/07/05/token-auth/"/>
    <updated>2014-07-05T08:23:01-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/07/05/token-auth</id>
    <content type="html"><![CDATA[<p>Handling user authentication in Angular with a Rails API.</p>

<!--more-->


<h2>Background</h2>

<p>This assumes that a Rails backend is serving an Angular application that exists completely independently
of Rails&#8217; views. The gist is that the Angular app lives in <code>Rails.root/client</code>
and is built into <code>Rails.root/public</code> by gulp, grunt or some other task runner.</p>

<p>One approach to authentication is to simply use Rails&#8217; sessions to set a cookie and
track the authenticated user. However, RESTful APIs are generally meant to be stateless (they store no
information about the state of the client) and this approach would require a stateful backend.
Here, the client-side (the Angular app) will track state and submit an authorization token on all http requests for accessing restricted server-side resources.
This code uses some material and designs from the <a href='http://www.fullstack.io/edu/angular/rails/'>Angular Rails Book</a> from Fullstack.io,
but without using Devise&rsquo;s depreciated token authentication. A similar approach (minus the angular side)
is available from <a href='http://railscasts.com/episodes/352-securing-an-api'>Railscasts</a>.
Similar examples are also in the <a href='https://www.codeschool.com/courses/surviving-apis-with-rails'>Code School Rails API Course</a>.</p>

<h2>Set Up</h2>

<p>This basic user model in Rails uses the <code>bcrypt</code> gem for authentication.
At a minimum, the user model has string fields for <code>username</code>, <code>email</code>, <code>password_digest</code> and <code>token</code>.
<code>User</code> generates a unique token for each user after it is validated:</p>

<figure class='code'><figcaption><span>user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="n">has_secure_password</span>
</span><span class='line'>  <span class="n">after_validation</span> <span class="ss">:ensure_token</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">ensure_token</span>
</span><span class='line'>      <span class="nb">self</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="n">generate_token</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="kp">private</span>
</span><span class='line'>      <span class="k">def</span> <span class="nf">generate_token</span>
</span><span class='line'>          <span class="kp">loop</span> <span class="k">do</span>
</span><span class='line'>              <span class="n">token</span> <span class="o">=</span> <span class="no">SecureRandom</span><span class="o">.</span><span class="n">uuid</span>
</span><span class='line'>              <span class="k">break</span> <span class="n">token</span> <span class="k">unless</span> <span class="no">User</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="ss">token</span><span class="p">:</span> <span class="n">token</span><span class="p">)</span><span class="o">.</span><span class="n">first</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The loop in <code>generate_token</code> ensures that each user has a unique token.</p>

<p>Server side authentication is just a standard <code>post</code> to <code>Sessions#create</code>:</p>

<figure class='code'><figcaption><span>sessions_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@user</span> <span class="o">&amp;&amp;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">200</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">nothing</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">401</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since Rails is serving a JSON api, some attention needs to be paid to the format and restriction
of server responses.
By default, Rails renders all properties from the user model, which means the <code>password_digest</code>
is included in the JSON reponse! An easy fix is to include the <code>active_model_serializer</code> gem
and create a serializer that specifies the response data:</p>

<figure class='code'><figcaption><span>app/serializers/user_serializer.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UserSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">:token</span><span class="p">,</span> <span class="ss">:id</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>and then add it to <code>Sessions#create</code></p>

<figure class='code'><figcaption><span>sessions_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">create</span>
</span><span class='line'>  <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">email</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:email</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="vi">@user</span> <span class="o">&amp;&amp;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">authenticate</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:password</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@user</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="ss">serializer</span><span class="p">:</span> <span class="no">UserSerializer</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">nothing</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">401</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>NB: If the app has a <code>Users#index</code> view, DO NOT use this serializer as it exposes <code>token</code>!</p>

<p>Finally, set up two helpers in the <code>ApplicationController</code> to make it easy to check
for an authenticated user:</p>

<figure class='code'><figcaption><span>application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="kp">private</span>
</span><span class='line'>  <span class="c1">#assumes signed_in is called first</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>      <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">username</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;username&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">helper_method</span> <span class="ss">:current_user</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">def</span> <span class="nf">signed_in?</span>
</span><span class='line'>     <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">username</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;username&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>     <span class="k">if</span> <span class="vi">@user</span> <span class="o">&amp;&amp;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;token&quot;</span><span class="o">]</span>
</span><span class='line'>       <span class="kp">true</span>
</span><span class='line'>     <span class="k">else</span>
</span><span class='line'>       <span class="n">render</span> <span class="ss">nothing</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">401</span>
</span><span class='line'>     <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">helper_method</span> <span class="ss">:signed_in?</span>
</span></code></pre></td></tr></table></div></figure>


<p>Remember that the Angular side of the application will be setting the appropriate headers
for an authenticated user, so the <code>signed_in?</code> method just needs to read them.
Combined with the <code>current_user</code> helper, these two methods allow authorization control like this:</p>

<figure class='code'><figcaption><span>users_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:signed_in?</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:edit</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">current_user</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
</span><span class='line'>          <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="n">current_user</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="ss">serializer</span><span class="p">:</span> <span class="no">SomeSerializer</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">render</span> <span class="ss">nothing</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">422</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Client-side authorization</h2>

<p>The flow for authentication in the angular client is:</p>

<ul>
    <li>POST user info to server</li>
    <li>store the return data in a cookie</li>
    <li>add cookie data to HTTP headers to make authenticated requests to server</li>
</ul>


<p>This workflow is split into two Angular services and one interceptor.</p>

<p>A simple login form might be:</p>

<figure class='code'><figcaption><span>signin.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;form</span> <span class="na">nonvalidate</span> <span class="na">ng-submit=</span><span class="s">&quot;newSession(signin)&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label&gt;</span>Email<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;email&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;signin.email&quot;</span> <span class="na">class=</span><span class="s">&#39;form-control&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;label&gt;</span>Password<span class="nt">&lt;/label&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;password&quot;</span> <span class="na">ng-model=</span><span class="s">&quot;signin.password&quot;</span> <span class="na">class=</span><span class="s">&#39;form-control&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'>  <span class="nt">&lt;p&gt;</span>
</span><span class='line'>    <span class="nt">&lt;input</span> <span class="na">type=</span><span class="s">&quot;submit&quot;</span> <span class="na">name=</span><span class="s">&#39;SigninButton&#39;</span> <span class="na">value=</span><span class="s">&quot;Sign in&quot;</span> <span class="na">class=</span><span class="s">&#39;btn btn-primary&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/p&gt;</span>
</span><span class='line'><span class="nt">&lt;/form&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>On submit, the controller passes the <code>signin</code> model into a service:</p>

<figure class='code'><figcaption><span>signin.controller.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;SigninController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$scope</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">newSession</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">authInfo</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">SessionService</span><span class="p">(</span><span class="nx">authInfo</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>&hellip;and the SessionService is a simple factory:</p>

<figure class='code'><figcaption><span>sessionservice.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;SessionService&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">CookieHandler</span><span class="p">,</span> <span class="nx">$http</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">authInfo</span><span class="p">){</span>
</span><span class='line'>    <span class="nx">$http</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="s1">&#39;api/v1/sessions&#39;</span><span class="p">,</span> <span class="nx">authInfo</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">success</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">CookieHandler</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>    <span class="p">})</span>
</span><span class='line'>      <span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="c1">//do something</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This service injects <code>$http</code> and <code>CookieHandler</code>, which is just
a convenience wrapper for Angular&rsquo;s <a href='https://docs.angularjs.org/api/ngCookies/service/$cookies'>ngCookies</a> module:</p>

<figure class='code'><figcaption><span>cookiehandler.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;ppApp&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">.</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;CookieHandler&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">$cookieStore</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">CookieHandler</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">set</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">put</span><span class="p">(</span><span class="s1">&#39;currentUser&#39;</span><span class="p">,</span> <span class="nx">user</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">get</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>          <span class="k">return</span> <span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="s1">&#39;currentUser&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">delete</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">user</span><span class="p">){</span>
</span><span class='line'>          <span class="nx">$cookieStore</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="s1">&#39;currentUser&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nx">CookieHandler</span><span class="p">;</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>So, on a successful <code>POST</code> from the login form, Angular dumps the server response data
into this cookie. Note that this approach automatically persists the user session through
page/browser reloads and that behavior may or may not be desired.</p>

<p>Remember that Rails is returning the user&rsquo;s <code>token</code> and <code>username</code> from <code>sessions#create</code>, so
those two params are now available in Angular.</p>

<p>But how can a user make authenticated requests?</p>

<p>Recall that there are two helpers in the Rails application:</p>

<figure class='code'><figcaption><span>application_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="kp">private</span>
</span><span class='line'><span class="c1">#assumes signed_in is called first</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">current_user</span>
</span><span class='line'>      <span class="vi">@current_user</span> <span class="o">||=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">username</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;username&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">helper_method</span> <span class="ss">:current_user</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">signed_in?</span>
</span><span class='line'>      <span class="vi">@user</span> <span class="o">=</span> <span class="no">User</span><span class="o">.</span><span class="n">find_by</span><span class="p">(</span><span class="ss">username</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;username&quot;</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="k">if</span> <span class="vi">@user</span> <span class="o">&amp;&amp;</span> <span class="vi">@user</span><span class="o">.</span><span class="n">token</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="n">headers</span><span class="o">[</span><span class="s2">&quot;token&quot;</span><span class="o">]</span>
</span><span class='line'>          <span class="kp">true</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">render</span> <span class="ss">nothing</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">401</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>  <span class="n">helper_method</span> <span class="ss">:signed_in?</span>
</span></code></pre></td></tr></table></div></figure>


<p>This allows an authentication-protected resource to be set up like this:</p>

<figure class='code'><figcaption><span>secrets_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">UsersController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>  <span class="n">before_action</span> <span class="ss">:signed_in?</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:update</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">update</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">current_user</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">user_params</span><span class="p">)</span>
</span><span class='line'>          <span class="c1"># do stuff....</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In the <code>signed_in</code> method, rails will be looking for <code>["username"]</code> and <code>["token"]</code>
headers. In Angular, headers can be configured with an
<a href='https://docs.angularjs.org/api/ng/service/$http'>interceptor</a>, which is just a
service (configuring the <code>$http.defaults</code> object is another possible option).
The intercepter will pull the user data from <code>CookieHandler</code> and put it in the request
headers:</p>

<figure class='code'><figcaption><span>sessioninjector.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">).</span><span class="nx">factory</span><span class="p">(</span><span class="s1">&#39;SessionInjector&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">CookieHandler</span><span class="p">){</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">request</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">config</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">CookieHandler</span><span class="p">.</span><span class="nx">get</span><span class="p">()</span> <span class="o">!==</span> <span class="kc">undefined</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nx">config</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s1">&#39;token&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">CookieHandler</span><span class="p">.</span><span class="nx">get</span><span class="p">().</span><span class="nx">token</span><span class="p">;</span>
</span><span class='line'>        <span class="nx">config</span><span class="p">.</span><span class="nx">headers</span><span class="p">[</span><span class="s1">&#39;username&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nx">CookieHandler</span><span class="p">.</span><span class="nx">get</span><span class="p">().</span><span class="nx">username</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">return</span> <span class="nx">config</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to use the interceptor, it needs to be pushed into <code>$httpProvider</code>&rsquo;s config array:</p>

<figure class='code'><figcaption><span>myapp.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;ngCookies&#39;</span><span class="p">])</span>
</span><span class='line'><span class="p">.</span><span class="nx">config</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">$httpProvider</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$httpProvider</span><span class="p">.</span><span class="nx">interceptors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s1">&#39;SessionInjector&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And that&rsquo;s it! Because angular services are singletons if/when a user logs in, the headers
are automatically set for making authenticated requests.</p>

<h2>Destroying sessions</h2>

<p>Since the app isn&rsquo;t using Rails&#8217; sessions, there is no need for <code>sessions#destroy</code>.
Just call <code>CookieHandler.delete()</code> in some logout form:</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;button</span> <span class="na">ng-click=</span><span class="s">&quot;logout()&quot;</span><span class="nt">&gt;</span>Logout<span class="nt">&lt;/button&gt;</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>sessions_controller.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;myApp&#39;</span><span class="p">).</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;sessionsController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">CookieHandler</span><span class="p">,</span> <span class="nx">$scope</span><span class="p">){</span>
</span><span class='line'>  <span class="nx">$scope</span><span class="p">.</span><span class="nx">logout</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="nx">CookieHandler</span><span class="p">.</span><span class="k">delete</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the cookies are cleared, <code>$httpProvider</code> updates its headers so that
it&rsquo;s no longer using <code>["token"]</code> and <code>["username"]</code>. This works because Angular has a config
stage and a runtime stage: by injecting the factory during the configuration stage, the
configuration can effectively be modified after the config stage because it calls a service.</p>

<h2>Issues</h2>

<p>This post was a result of me trying to roll my own authentication in Angular whilst learning
the framework and isn&rsquo;t ready for production without some modifications.</p>

<p>Using <code>https</code> will help a lot for securing the system, but the backend also needs to look at
ways to encrypt user tokens, change token values periodically and
take measures to protect against <a href='http://en.wikipedia.org/wiki/Timing_attack'>timing attacks</a>. This post also didn&rsquo;t cover setting rails&#8217; CSRF
to play nicely together when using Rails as a JSON api.</p>

<p>Alternatively these two libraries look like great time savers: <a href='https://github.com/lynndylanhurley/ng-token-auth'><a href="https://github.com/lynndylanhurley/ng-token-auth">https://github.com/lynndylanhurley/ng-token-auth</a></a>
<a href='https://github.com/lynndylanhurley/devise_token_auth'><a href="https://github.com/lynndylanhurley/devise_token_auth">https://github.com/lynndylanhurley/devise_token_auth</a></a>.
<a href='https://github.com/cloudspace/angular_devise'>Angular Devise</a> is another option if the Angular
app is embedded in Rails.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular-Gulp-Bower Project Setup]]></title>
    <link href="http://evan-007.github.io/blog/2014/06/15/angular-gulp/"/>
    <updated>2014-06-15T04:36:05-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/06/15/angular-gulp</id>
    <content type="html"><![CDATA[<p>Structure and build an app with ng, bower and gulp<!--more--></p>

<h2>Setup</h2>


<p>Bower is for dependency management, gulp is for tasks (preview server, build, minify, etc) and angular is for fun. <code>cd</code> into project directory and run <code>bower init</code> to get started and generate a <code>bower.json</code> file. Once that&rsquo;s one, use <code>bower install --save angular</code> to install and save packages locally.</p>

<p>Create a <code>gulpfile.js</code> in the same directory and add one line to get started:</p>

<figure class='code'><figcaption><span>gulpfile.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">connect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-connect&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;connect&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">connect</span><span class="p">.</span><span class="nx">server</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">root</span><span class="o">:</span> <span class="s1">&#39;app/&#39;</span> <span class="c1">//Our application code will live inside of app/</span>
</span><span class='line'>        <span class="nx">port</span><span class="o">:</span> <span class="mi">8888</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This gives one basic task to open a live preview for the site. Remember to set the root to the correct path for <code>index.html</code></p>

<p>Next, add minification:</p>

<figure class='code'><figcaption><span>gulpfile.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="c1">// truncated from before</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;usemin&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">gulp</span><span class="p">.</span><span class="nx">src</span><span class="p">(</span><span class="s1">&#39;./index.html&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">usemin</span><span class="p">({</span>
</span><span class='line'>      <span class="nx">css</span><span class="o">:</span> <span class="p">[</span><span class="nx">minifyCss</span><span class="p">(),</span> <span class="s1">&#39;concat&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="nx">html</span><span class="o">:</span> <span class="p">[</span><span class="nx">minifyHtml</span><span class="p">({</span><span class="nx">empty</span><span class="o">:</span> <span class="kc">true</span><span class="p">})],</span>
</span><span class='line'>      <span class="nx">js</span><span class="o">:</span> <span class="p">[</span><span class="nx">uglify</span><span class="p">(),</span> <span class="nx">rev</span><span class="p">()]</span>
</span><span class='line'>    <span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="nx">pipe</span><span class="p">(</span><span class="nx">gulp</span><span class="p">.</span><span class="nx">dest</span><span class="p">(</span><span class="s1">&#39;build/&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This block tells <code>gulp usemin</code> to look at <code>index.html</code> and minify and concatenate the css and js files and html. Gulp will put the output of this command in <code>build/</code>. The <code>css</code>, <code>html</code> and <code>js</code> values are optional. Drop some if minification/uglification isn&rsquo;t needed.</p>

<p>For the minify and js concat to work, <code>index.html</code> needs blocks. See the <a href='https://github.com/zont/gulp-usemin'>docs</a>.</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="c">&lt;!-- build:css style.css --&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/clear.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="na">href=</span><span class="s">&quot;css/main.css&quot;</span><span class="nt">/&gt;</span>
</span><span class='line'><span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- build:js js/lib.js --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;../lib/angular-min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;../lib/angular-animate-min.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- endbuild --&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c">&lt;!-- build:js1 js/app.js --&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/app.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/controllers/thing-controller.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/models/thing-model.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;js/views/thing-view.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="c">&lt;!-- endbuild --&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, define compound tasks in the gulpfile</p>

<figure class='code'><figcaption><span>gulpfile.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;default&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;connect&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="nx">gulp</span><span class="p">.</span><span class="nx">task</span><span class="p">(</span><span class="s1">&#39;build&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;copy-html-files&#39;</span><span class="p">,</span> <span class="s1">&#39;usemin&#39;</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here, the default task <code>gulp</code> is matched to the task defined above. <code>Build</code> is now a compound task that runs two tasks in succession.</p>

<p>Finally, add the dependencies to the start of the file:</p>

<figure class='code'><figcaption><span>gulpfile.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">gulp</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">connect</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-connect&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">uglify</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-uglify&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">minifyHtml</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-minify-html&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">minifyCss</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-minify-css&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">usemin</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;gulp-usemin&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Parsing JSON W/ruby]]></title>
    <link href="http://evan-007.github.io/blog/2014/05/31/json/"/>
    <updated>2014-05-31T05:46:38-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/05/31/json</id>
    <content type="html"><![CDATA[<p>One way to parse JSON in Ruby.<!--more--></p>

<h2>JSON</h2>


<p>Part of ruby&rsquo;s standard library is <code>json</code>, and it can used with another std lib <code>open-uri</code> to open and parse JSON online. This is handy for working with APIs.</p>

<figure class='code'><figcaption><span>git-some-json.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">5</span>
</span><span class='line'>  <span class="vi">@lol</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://hipsterjesus.com/api/?paras=1&amp;type=hipster-centric&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">clean</span> <span class="o">=</span> <span class="vi">@lol</span><span class="o">[</span><span class="s1">&#39;text&#39;</span><span class="o">].</span><span class="n">gsub!</span><span class="p">(</span><span class="s1">&#39;&lt;p&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub!</span><span class="p">(</span><span class="s1">&#39;&lt;/p&gt;&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span> <span class="o">=</span> <span class="no">Article</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="s2">&quot;This is article </span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">,</span> <span class="ss">body</span><span class="p">:</span> <span class="n">clean</span><span class="p">)</span>
</span><span class='line'>  <span class="n">a</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>An example from a rake task in <a href="https://github.com/evan-007/ng-wikiful">this project</a>. <code>open-uri</code> let&rsquo;s you open URLs like files and then <code>JSON.load</code> reads and returns an IO-object (which is what open-uri is getting). <code>load</code> is a little different from the <code>parse</code> method: which seems to only work on JSON strings? I couldn&rsquo;t make <code>parse</code> work with IO from a URL.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blocks, Procs and Lambdas]]></title>
    <link href="http://evan-007.github.io/blog/2014/05/30/blocks/"/>
    <updated>2014-05-30T08:37:28-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/05/30/blocks</id>
    <content type="html"><![CDATA[<p>What&rsquo;s the difference between the three?<!--more--></p>

<p>In rails, I used blocks a lot without actually knowing that it was a block:</p>

<figure class='code'><figcaption><span>some-rails-thing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Band</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">band</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">band</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="s2"> | </span><span class="si">#{</span><span class="n">band</span><span class="o">.</span><span class="n">korean_name</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">The</span> <span class="n">block</span> <span class="n">is</span> <span class="n">everything</span> <span class="n">after</span> <span class="sb">```do```</span> <span class="ow">and</span> <span class="n">could</span> <span class="n">also</span> <span class="n">be</span> <span class="n">written</span> <span class="k">in</span> <span class="n">a</span> <span class="n">single</span> <span class="n">line</span>
</span><span class='line'><span class="ss">like</span><span class="p">:</span> <span class="sb">```Band.all.each { |band| puts &quot;</span><span class="si">#{</span><span class="n">band</span><span class="o">.</span><span class="n">name</span><span class="si">}</span><span class="sb"> | </span><span class="si">#{</span><span class="n">band</span><span class="o">.</span><span class="n">korean_name</span><span class="si">}</span><span class="sb">&quot; }```</span><span class="o">.</span> <span class="no">They</span> <span class="n">are</span> <span class="n">kind</span> <span class="n">of</span> <span class="n">like</span> <span class="n">anonymous</span> <span class="n">functions</span> <span class="k">in</span> <span class="n">javascript</span> <span class="k">in</span> <span class="n">that</span> <span class="n">they</span> <span class="n">are</span> <span class="ow">not</span> <span class="n">bound</span> <span class="n">to</span> <span class="n">an</span> <span class="n">identifier</span> <span class="p">(</span><span class="n">some</span> <span class="n">variable</span> <span class="nb">name</span> <span class="ow">or</span> <span class="n">whatever</span><span class="p">)</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="no">What</span> <span class="n">happens</span> <span class="k">if</span> <span class="n">we</span> <span class="n">want</span> <span class="n">to</span> <span class="n">reuse</span> <span class="n">that</span> <span class="n">block</span> <span class="ow">and</span> <span class="n">run</span> <span class="n">the</span> <span class="n">same</span> <span class="n">code</span> <span class="n">on</span> <span class="sb">```Singer```</span> <span class="ow">or</span> <span class="n">reuse</span> <span class="n">the</span> <span class="n">code</span> <span class="n">outside</span> <span class="n">of</span> <span class="n">the</span> <span class="n">enumerator?</span>
</span><span class='line'>
</span><span class='line'><span class="no">Procs</span> <span class="n">allow</span> <span class="n">blocks</span> <span class="n">to</span> <span class="n">be</span> <span class="n">given</span> <span class="n">a</span> <span class="nb">name</span><span class="p">,</span> <span class="ow">or</span> <span class="n">a</span> <span class="n">pointer</span><span class="p">,</span> <span class="n">so</span> <span class="n">that</span> <span class="n">they</span> <span class="n">can</span> <span class="n">be</span> <span class="n">reused</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby some-other-rails-thing
list_names = Proc.new { |thing| puts &ldquo;#{thing.name} | #{thing.korean_name}&rdquo; }</p>

<h1>or list_names = proc { |thing| puts &ldquo;#{thing.name} | #{thing.korean_name}&rdquo; }</h1>

<p>list_names.call Band.first</p>

<h1>returns output of the proc</h1>

<h1>can call on something else, too:</h1>

<p>list_names.call Singer.find(7)</p>

<figure class='code'><figcaption><span>some-rails-thing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&lt;</span><span class="n">h4</span><span class="o">&gt;</span><span class="no">Lambdas</span><span class="o">&lt;</span><span class="sr">/h4&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">Proc is sort for procedure(????), similar to Scheme, like in the MIT course. Scheme also has lambda, which is some other sytax for declaring a procedure, dunno, verify that.</span>
</span><span class='line'>
</span><span class='line'><span class="sr">In ruby, lambdas are a lot like procs:</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby
list_names_lambda = lambda { |thing| puts &ldquo;#{thing.name} | #{thing.korean_name}&rdquo; }</p>

<h1>alt syntax: list_names_lambda = &ndash;> (thing) { puts &ldquo;#{thing.name} | #{thing.korean_name}&rdquo; }</h1>

<p>list_names_lambda.call Band.first</p>

<h1>same output as before</h1>

<h1>but lambdas throw errors on params:</h1>

<p>list_names.call(Band.first, &lsquo;some random string lololol&rsquo;)</p>

<h1>returns list_names on Band.first, ignores 2nd param</h1>

<p>list_names_lambda.call(Band.first, &lsquo;some random string lolol&rsquo;)
ArgumentError: wrong number of arguments (2 for 1)</p>

<figure class='code'><figcaption><span>some-rails-thing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">The</span> <span class="n">only</span> <span class="n">other</span> <span class="n">big</span> <span class="n">difference</span> <span class="n">I</span> <span class="n">could</span> <span class="n">find</span> <span class="n">on</span> <span class="n">the</span> <span class="n">two</span> <span class="n">was</span> <span class="n">that</span> <span class="k">when</span> <span class="n">using</span> <span class="sb">```return```</span><span class="p">,</span> <span class="n">a</span> <span class="nb">proc</span> <span class="n">will</span> <span class="k">do</span> <span class="n">things</span> <span class="n">a</span> <span class="nb">lambda</span> <span class="n">doesn</span><span class="err">&#39;</span><span class="n">t</span><span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby</p>

<p>def method_1</p>

<pre><code>list_names = Proc.new { |thing| return "#{thing.name} | #{thing.korean_name}" }
</code></pre>

<p>  list_names.call(Band.first)
  return &lsquo;the meaning of life&rsquo;
end</p>

<p>def method_2</p>

<pre><code>list_names_lambda = lambda { |thing| return "#{thing.name} | #{thing.korean_name}" }
list_names_lambda.call(Band.first)
</code></pre>

<p>  return &lsquo;ask method_1 for the meaning of life&rsquo;
end</p>

<figure class='code'><figcaption><span>some-rails-thing</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Calling</span> <span class="n">method_1</span> <span class="n">returns</span> <span class="n">the</span> <span class="n">result</span> <span class="n">of</span> <span class="n">the</span> <span class="nb">proc</span><span class="p">,</span> <span class="n">but</span> <span class="n">calling</span> <span class="n">method_2</span> <span class="n">returns</span> <span class="n">the</span> <span class="n">final</span> <span class="k">return</span> <span class="k">in</span> <span class="n">the</span> <span class="nb">method</span><span class="o">!</span> <span class="no">In</span> <span class="n">other</span> <span class="n">words</span><span class="p">,</span> <span class="n">method_1</span> <span class="n">will</span> <span class="n">tell</span> <span class="n">you</span> <span class="n">about</span> <span class="sb">```Band.first```</span> <span class="k">while</span> <span class="n">method_2</span> <span class="n">will</span> <span class="n">tell</span> <span class="n">you</span> <span class="n">to</span> <span class="n">ask</span> <span class="n">method_1</span> <span class="n">about</span> <span class="n">the</span> <span class="n">meaning</span> <span class="n">of</span> <span class="n">life</span><span class="o">.</span> <span class="no">The</span> <span class="n">general</span> <span class="n">consensus</span> <span class="n">seems</span> <span class="n">to</span> <span class="n">be</span> <span class="n">to</span> <span class="n">get</span> <span class="k">in</span> <span class="n">the</span> <span class="n">habit</span> <span class="n">of</span> <span class="n">using</span> <span class="n">lambdas</span> <span class="n">to</span> <span class="n">avoid</span> <span class="n">obnoxious</span> <span class="n">debug</span> <span class="n">errors</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h2</span><span class="o">&gt;</span><span class="no">Back</span> <span class="n">to</span> <span class="no">Rails</span><span class="o">&lt;</span><span class="sr">/h2&gt;</span>
</span><span class='line'><span class="sr">For scopes:</span>
</span></code></pre></td></tr></table></div></figure>


<p>ruby
scope :approved, &ndash;> {where(approved: true)}
&#8220;`
We use a lambda, but why? Question for <a href="http://apidock.com/rails/ActiveRecord/Scoping/Named/ClassMethods/scope">another day</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular Overview]]></title>
    <link href="http://evan-007.github.io/blog/2014/05/17/angular-overview/"/>
    <updated>2014-05-17T08:00:00-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/05/17/angular-overview</id>
    <content type="html"><![CDATA[<p>Notes on angular<!--more--></p>

<h2>Starting out</h2>


<p>Add angular.js to html and create the app module:</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var app = angular.module('appname', []);</span></code></pre></td></tr></table></div></figure>


<p>the <code>[]</code> is where dependencies go.</p>

<p>Then add it to the page:</p>

<figure class='code'><figcaption><span>index.html</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;html ng-app='appname'&gt;</span></code></pre></td></tr></table></div></figure>


<p>And we&rsquo;re ready!</p>

<p>Controllers:</p>

<p>Get data on to the page! First, put app in closure and then add controller:</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">angular</span><span class="p">.</span><span class="nx">module</span><span class="p">(</span><span class="s1">&#39;appname&#39;</span><span class="p">,</span> <span class="p">[]);</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;YourController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">product</span> <span class="o">=</span> <span class="nx">gem</span><span class="p">;</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">gem</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">name</span><span class="o">:</span> <span class="s2">&quot;This is just a js object&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">price</span><span class="o">:</span> <span class="mf">2.95</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">description</span><span class="o">:</span> <span class="s1">&#39;blablabal&#39;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Controllers are in CapitalCase and always have the word &lsquo;controller&rsquo;. When called in the view, give them an alias:<code>&lt;div ng-controller="MyController as store"&gt;</code></p>

<h2>Some directives</h2>


<p>ng-show</p>

<p>when used with an expression, will not show if expression is <code>false</code> or not present. ie: <code>available: false</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;div ng-show='store.thing.available'&gt;</span></code></pre></td></tr></table></div></figure>


<p>This div will not show because the attribute is false.</p>

<p>ng-hide
Use with boolean attributes, like ng-show, hides when <code>true</code>.</p>

<p>ng-repeat
iterates over an array.</p>

<p>ng-src
show images when path is in an attribute: <code>&lt;img ng-src= /&gt;</code></p>

<p>ng-click
use with href to do stuff on click: <code>&lt;a href ng-click="tab =1"&gt;link&lt;/a&gt;</code> then can see by inserting the expression &#8220;&#8220;&#8220; somewhere.</p>

<p>ng-init
use to set a value for an expression on page load. with the above ng-click example, add something like <code>&lt;secion ng-init="tab = 1"&gt;</code>. Should probably put this logic in a controller though!</p>

<p>ng-class
takes lots of arguments, read up on it. <code>&lt;li ng-class="{ active:tab === 1 }"&gt;</code></p>

<h2>Filters</h2>


<p>Just like unix, use | to pass the expression on the left to the filter on the right. <code>
or</code>
also, <code>uppercase</code> <code>lowercase</code>,
Limit can be used either with an expression <code>limitTo:8</code>, or to limit the number of items in an array when used with <code>ng-repeat</code></p>

<p>order: <code>orderBy:'-price'</code>, without minus it goes in asc order.</p>

<h2>Forms</h2>


<p>use the ng-model directive on form elements to create two-way binding for live previews: <code>&lt;textarea ng-model="review.body"&gt;&lt;/textarea&gt;</code> then preview with  somewhere else on page.</p>

<p>ng-model will work with checkboxes to produce a boolean, as well as select or radio buttons to set a value.</p>

<p>Initialize the form with a controller!</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ReviewController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">review</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>ng-submit is used to post the form: it calls a function on submit: <code>&lt;form name="reviewForm" ng-controller="ReviewController as reviewCtrl" ng-submit="reviewCtrl.addReview(product)"&gt;</code>
NOTE: ng-submit goes in the FORM tags not in the button tags.</p>

<p>then in the controller:</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">controller</span><span class="p">(</span><span class="s1">&#39;ReviewController&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">review</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">addReview</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">product</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">product</span><span class="p">.</span><span class="nx">reviews</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">review</span><span class="p">);</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>




<h5>Validations</h5>


<p>Turn off browser validations: <code>&lt;form name="reviewForm" ng-controller="ReviewController as reviewCtrl" ng-submit="reviewCtrl.addReview(product)" novalidate&gt;</code></p>

<p>then add <code>required</code> to fields:<code>&lt;input type="email" class="form-control" ng-model="reviewCtrl.review.email" required /&gt;&lt;br&gt;</code></p>

<p>then add some debug code to check if valid (call form&rsquo;s name): <code>&lt;div&gt;Review form is &lt;/div&gt;</code> $valid is an internal angular goodie</p>

<p>To stop invalid form submission use valid with ng-submit: &#8220;`<form name="reviewForm" ng-controller="ReviewController as reviewCtrl" ng-submit="reviewForm.$valid && reviewCtrl.addReview(product)" novalidate></p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">input</span> <span class="kd">with</span> <span class="nx">nothing</span><span class="o">:</span> <span class="kr">class</span> <span class="nx">is</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">pristine</span><span class="p">.</span> <span class="kd">with</span> <span class="nx">text</span><span class="o">:</span> <span class="nx">ng</span><span class="o">-</span><span class="nx">dirty</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Angular</span> <span class="nx">Pieces</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Controllers</span><span class="o">:</span> <span class="nx">these</span> <span class="nx">are</span> <span class="nx">responsible</span> <span class="nx">to</span> <span class="nx">bringing</span> <span class="nx">data</span> <span class="nx">to</span> <span class="nx">from</span> <span class="nx">the</span> <span class="nx">models</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">view</span><span class="p">.</span> <span class="nx">They</span> <span class="nx">often</span> <span class="nx">have</span> <span class="nx">a</span> <span class="nx">lot</span> <span class="nx">more</span> <span class="nx">logic</span> <span class="k">in</span> <span class="nx">them</span> <span class="nx">than</span> <span class="nx">controllers</span> <span class="k">in</span> <span class="nx">Rails</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Modules</span><span class="o">:</span> <span class="nx">these</span> <span class="nx">hold</span> <span class="nx">reuseable</span> <span class="nx">code</span><span class="p">.</span> <span class="nx">They</span> <span class="nx">are</span> <span class="nx">a</span> <span class="nx">higher</span> <span class="nx">level</span> <span class="nx">abstraction</span> <span class="nx">than</span> <span class="nx">controllers</span><span class="o">:</span> <span class="nx">modules</span> <span class="nx">contain</span> <span class="nx">controllers</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Scopes</span><span class="o">:</span> <span class="nx">the</span> <span class="s1">&#39;execution context for expressions&#39;</span><span class="p">.</span> <span class="nx">the</span> <span class="nx">glue</span> <span class="nx">between</span> <span class="nx">the</span> <span class="nx">application</span> <span class="nx">and</span> <span class="nx">the</span> <span class="nx">view</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">the</span> <span class="err">```</span><span class="nx">$rootscope</span><span class="err">```</span> <span class="nx">is</span> <span class="nx">the</span> <span class="nx">top</span> <span class="nx">level</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">application</span><span class="p">,</span> <span class="nx">where</span> <span class="err">```</span><span class="nx">ng</span><span class="o">-</span><span class="nx">app</span><span class="err">```</span> <span class="nx">is</span> <span class="nx">bound</span><span class="p">.</span> <span class="nx">Anything</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">root</span> <span class="nx">scope</span> <span class="nx">can</span> <span class="nx">be</span> <span class="nx">accessed</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">sub</span> <span class="nx">areas</span><span class="p">.</span> <span class="nx">So</span> <span class="nx">when</span> <span class="nx">you</span> <span class="k">do</span> <span class="k">this</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>html index.html
<doctype html></p>

<pre><code>&lt;html ng-app='myApp'&gt;
</code></pre>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">The</span> <span class="nx">root</span> <span class="nx">scope</span> <span class="nx">is</span> <span class="nx">the</span> <span class="nx">entire</span> <span class="nx">page</span><span class="p">.</span> <span class="nx">So</span><span class="p">,</span> <span class="nx">when</span> <span class="nx">you</span> <span class="nx">bind</span> <span class="nx">a</span> <span class="nx">controller</span> <span class="nx">to</span> <span class="nx">a</span> <span class="nx">dom</span> <span class="nx">element</span><span class="p">,</span> <span class="nx">that</span> <span class="nx">controller</span><span class="err">&#39;</span><span class="nx">s</span> <span class="err">```</span><span class="nx">$scope</span><span class="err">```</span> <span class="nx">is</span> <span class="nx">only</span> <span class="nx">accessible</span> <span class="k">in</span> <span class="nx">that</span> <span class="nx">dom</span> <span class="nx">element</span><span class="p">.</span> <span class="nx">Scope</span> <span class="nx">cascascades</span> <span class="nx">like</span> <span class="nx">css</span><span class="p">,</span> <span class="nx">so</span> <span class="nx">any</span> <span class="nx">active</span> <span class="nx">scopes</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">parent</span> <span class="nx">elements</span> <span class="nx">are</span> <span class="nx">accessible</span> <span class="nx">as</span> <span class="nx">well</span><span class="p">.</span> <span class="nx">But</span> <span class="k">if</span> <span class="nx">any</span> <span class="nx">of</span> <span class="nx">the</span> <span class="nx">scope</span> <span class="nx">share</span> <span class="nx">the</span> <span class="nx">same</span> <span class="nx">attributes</span><span class="p">,</span> <span class="nx">the</span> <span class="nx">more</span> <span class="nx">specific</span> <span class="nx">scope</span> <span class="nx">is</span> <span class="nx">the</span> <span class="nx">one</span> <span class="nx">that</span> <span class="nx">counts</span><span class="p">.</span> <span class="nx">Scopes</span> <span class="nx">are</span> <span class="nx">kind</span> <span class="nx">of</span> <span class="nx">analogous</span> <span class="nx">to</span> <span class="nx">instances</span> <span class="nx">variables</span> <span class="nx">from</span> <span class="nx">rails</span> <span class="nx">controllers</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h2</span><span class="o">&gt;</span><span class="nx">Event</span> <span class="nx">listening</span> <span class="nx">and</span> <span class="nx">broadcasting</span><span class="o">&lt;</span><span class="err">/h2&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Two</span> <span class="nx">way</span> <span class="nx">binding</span> <span class="nx">makes</span> <span class="nx">it</span> <span class="nx">possible</span> <span class="nx">to</span> <span class="nx">update</span> <span class="nx">a</span> <span class="nx">$scope</span> <span class="nx">value</span> <span class="nx">when</span> <span class="nx">it</span> <span class="nx">changes</span><span class="p">.</span> <span class="nx">However</span><span class="p">,</span> <span class="k">if</span> <span class="nx">You</span> <span class="nx">need</span> <span class="nx">to</span> <span class="nx">run</span> <span class="nx">a</span> <span class="kd">function</span> <span class="nx">or</span> <span class="err">```</span><span class="nx">ng</span><span class="o">-</span><span class="nx">repeat</span><span class="err">```</span> <span class="nx">on</span> <span class="nx">a</span> <span class="nx">value</span><span class="p">,</span> <span class="nx">it</span> <span class="nx">needs</span> <span class="nx">a</span> <span class="nx">listener</span> <span class="nx">to</span> <span class="nx">update</span> <span class="k">in</span> <span class="nx">real</span> <span class="nx">time</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">To</span> <span class="nx">run</span> <span class="nx">a</span> <span class="nx">callback</span> <span class="kd">function</span> <span class="nx">when</span> <span class="nx">an</span> <span class="nx">element</span> <span class="nx">updates</span><span class="p">,</span> <span class="nx">use</span> <span class="nx">a</span> <span class="nx">watcher</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>js controller.js
$scope.watch(&lsquo;todoItems&rsquo;, function(max) {</p>

<pre><code>$scope.maxItems = listItems(max);
</code></pre>

<p>});</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">This</span> <span class="nx">will</span> <span class="nx">setup</span> <span class="nx">a</span> <span class="nx">watcher</span> <span class="nx">on</span> <span class="nx">the</span> <span class="err">```</span><span class="nx">ng</span><span class="o">-</span><span class="nx">model</span><span class="o">=</span><span class="s1">&#39;todoItems&#39;</span><span class="err">```</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">view</span><span class="p">.</span> <span class="nx">When</span> <span class="nx">it</span> <span class="nx">changes</span><span class="p">,</span> <span class="nx">the</span> <span class="nx">maxItems</span> <span class="nx">scope</span> <span class="nx">will</span> <span class="nx">be</span> <span class="nx">updated</span> <span class="kd">with</span> <span class="nx">the</span> <span class="k">new</span> <span class="nx">value</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">h3</span><span class="o">&gt;</span><span class="nx">Sharing</span> <span class="nx">values</span> <span class="nx">between</span> <span class="nx">scopes</span><span class="o">&lt;</span><span class="err">/h3&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">To</span> <span class="nx">communicate</span> <span class="nx">state</span> <span class="nx">between</span> <span class="nx">controllers</span> <span class="nx">use</span> <span class="nx">scope</span> <span class="nx">events</span> <span class="nx">like</span> <span class="err">```</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">$on</span><span class="err">```</span><span class="p">,</span> <span class="err">```</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">$emit</span><span class="err">```</span><span class="p">,</span> <span class="err">```</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">watch</span><span class="err">```</span> <span class="nx">and</span> <span class="err">```</span><span class="nx">$scope</span><span class="p">.</span><span class="nx">$broadcast</span><span class="err">```</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">$scope</span><span class="p">.</span><span class="nx">$broadcast</span> <span class="nx">is</span> <span class="nx">to</span> <span class="nx">send</span> <span class="nx">a</span> <span class="nx">message</span> <span class="nx">from</span> <span class="nx">a</span> <span class="nx">parent</span> <span class="nx">controller</span> <span class="nx">to</span> <span class="nx">its</span> <span class="nx">child</span> <span class="nx">controllers</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>js app.js
//parent controller scope
$scope.$broadcast(&lsquo;doSomething&rsquo;);</p>

<p>//child controller scope
$scope.$on(&lsquo;doSomething&rsquo;, function(event, data) {</p>

<pre><code>$scope.doSomething = true;
</code></pre>

<p>});</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">Here</span><span class="p">,</span> <span class="nx">the</span> <span class="nx">parent</span> <span class="nx">scope</span> <span class="nx">broadcasts</span> <span class="nx">and</span> <span class="nx">triggers</span> <span class="nx">a</span> <span class="kd">function</span> <span class="nx">inside</span> <span class="nx">the</span> <span class="nx">child</span> <span class="nx">scope</span> <span class="nx">which</span> <span class="nx">is</span> <span class="nx">listening</span> <span class="k">for</span> <span class="nx">the</span> <span class="nx">$broadcast</span> <span class="nx">via</span> <span class="nx">the</span> <span class="nx">$on</span> <span class="nx">listener</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Similarly</span><span class="p">,</span> <span class="nx">events</span> <span class="nx">can</span> <span class="nx">be</span> <span class="nx">emitted</span> <span class="nx">to</span> <span class="nx">go</span> <span class="nx">from</span> <span class="nx">a</span> <span class="nx">child</span> <span class="nx">to</span> <span class="nx">a</span> <span class="nx">parent</span> <span class="nx">scope</span><span class="o">:</span>
</span></code></pre></td></tr></table></div></figure>


<p>js app.js
//child controller scope
$scope.$emit(&lsquo;doSomething&rsquo;);</p>

<p>//parent controller scope
$scope.$on(&lsquo;doSomething&rsquo;, function(event, data) {</p>

<pre><code>$scope.doSomething = true;
</code></pre>

<p>});</p>

<figure class='code'><figcaption><span>app.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="nx">$emit</span> <span class="nx">goes</span> <span class="nx">all</span> <span class="nx">the</span> <span class="nx">way</span> <span class="nx">up</span> <span class="nx">to</span> <span class="nx">the</span> <span class="nx">$rootScope</span><span class="p">.</span> <span class="nx">Use</span> <span class="err">```</span><span class="nx">stopPropogation</span><span class="p">()</span><span class="err">```</span> <span class="nx">to</span> <span class="nx">controller</span> <span class="nx">it</span><span class="p">.</span>
</span><span class='line'>
</span><span class='line'><span class="nx">What</span> <span class="nx">about</span> <span class="nx">getting</span> <span class="nx">sibling</span> <span class="nx">scopes</span> <span class="nx">to</span> <span class="nx">communicate</span><span class="o">?</span> <span class="nx">Pass</span> <span class="nx">events</span> <span class="nx">by</span> <span class="nx">$broadcast</span> <span class="nx">on</span> <span class="nx">the</span> <span class="nx">rootscope</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>js app.js
//sibling controller scope
.controller(&lsquo;siblingCtrl&rsquo;, function($scope, $rootScope){
$scope.sendMessage = function(value) {</p>

<pre><code>$rootScope.$broadcast('someData', value);
</code></pre>

<p>  };
})</p>

<p>//sibling 2 controller scope
$scope.$on(&lsquo;doSomething&rsquo;, function(event, data) {</p>

<pre><code>$scope.doSomething = true;
</code></pre>

<p>});
&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Single Responsibility and Decorators]]></title>
    <link href="http://evan-007.github.io/blog/2014/05/10/single-responsibility-and-decorators/"/>
    <updated>2014-05-10T06:05:35-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/05/10/single-responsibility-and-decorators</id>
    <content type="html"><![CDATA[<p>Refactoring repeated code into a decorator<!--more--></p>

<p>In a recent project, I had to write a <code>search</code> method for several different models. I realized towards the end of the project that I had repeated the same basic method 4 or 5 times in different models and tried to figure out a way to refactor it.</p>

<h2>The Problem</h2>




<figure class='code'><figcaption><span>all_my_models.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">text_search</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">query</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span><span class="s2">&quot;username ilike :q or email ilike :q&quot;</span><span class="p">,</span> <span class="ss">q</span><span class="p">:</span> <span class="n">query</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span>
</span><span class='line'>        <span class="n">updated_at</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">order</span><span class="p">(</span><span class="n">updated_at</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Project</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">text_search</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">query</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span><span class="s2">&quot;title ilike :q or description ilike :q&quot;</span><span class="p">,</span> <span class="ss">q</span><span class="p">:</span> <span class="n">query</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span>
</span><span class='line'>        <span class="n">updated_at</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">order</span><span class="p">(</span><span class="n">updated_at</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Ticket</span> <span class="o">&lt;</span> <span class="ss">ActiveRecord</span><span class="p">:</span><span class="ss">:Base</span>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">text_search</span><span class="p">(</span><span class="n">query</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">query</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>      <span class="n">where</span><span class="p">(</span><span class="s2">&quot;subject ilike :q or body ilike :q&quot;</span><span class="p">,</span> <span class="ss">q</span><span class="p">:</span> <span class="n">query</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span>
</span><span class='line'>        <span class="n">updated_at</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span>
</span><span class='line'>    <span class="k">else</span>
</span><span class='line'>      <span class="n">order</span><span class="p">(</span><span class="n">updated_at</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Three different class, three instances of the same search, lots of repeated code. There are only 3 differences in the three methods: <code>attribute_1</code>, <code>attribute_2</code> and <code>class</code>. It&rsquo;s easy enough to move the attributes into method arguments, but how can a method be made to work with multiple classes?</p>

<h2>Decorators</h2>


<p>Decorators are a feature of object-oriented languages, that, from my understanding, are used to extend an objects&#8217; functionality. They&rsquo;re portable in the sense that you can use them to extend different classes.</p>

<p>Ruby has it&rsquo;s own delegators&hellip;</p>

<figure class='code'><figcaption><span>search_model.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SearchModel</span> <span class="o">&lt;</span> <span class="no">SimpleDelegator</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">text_search</span><span class="p">(</span><span class="n">param1</span><span class="p">,</span> <span class="n">param2</span><span class="p">,</span> <span class="n">options</span><span class="o">=</span><span class="p">{})</span>
</span><span class='line'>      <span class="n">query</span> <span class="o">=</span> <span class="n">options</span><span class="o">[</span><span class="ss">:query</span><span class="o">]</span>
</span><span class='line'>      <span class="k">if</span> <span class="n">query</span><span class="o">.</span><span class="n">present?</span>
</span><span class='line'>          <span class="n">__getobj__</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">param1</span><span class="si">}</span><span class="s2"> @@ :q or </span><span class="si">#{</span><span class="n">param2</span><span class="si">}</span><span class="s2"> @@ :q&quot;</span><span class="p">,</span> <span class="ss">q</span><span class="p">:</span><span class="n">query</span><span class="p">)</span><span class="o">.</span><span class="n">order</span><span class="p">(</span><span class="n">updated_at</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>          <span class="n">order</span><span class="p">(</span><span class="n">updated_at</span><span class="p">:</span> <span class="ss">:desc</span><span class="p">)</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This could probably be refactored further, but it let&rsquo;s me get the same functionality as the methods in the beginning of the post without having to rewrite the <code>text_search</code> method in every class I need to use it.</p>

<p>So now in my controllers I can use:</p>

<figure class='code'><figcaption><span>users_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>  <span class="vi">@users</span> <span class="o">=</span> <span class="no">SearchModel</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="p">)</span><span class="o">.</span><span class="n">text_search</span><span class="p">(</span><span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="ss">query</span><span class="p">:</span> <span class="n">params</span><span class="o">[</span><span class="ss">:query</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s important to note that if you don&rsquo;t pass in array of objects with <code>Model.all</code> the decorator will just return an array of the objects&#8217; attributes.</p>

<p>This probably isn&rsquo;t the best use of a decorator, but it does get me one step closer to Single Responsibility!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Freelance Lessons]]></title>
    <link href="http://evan-007.github.io/blog/2014/05/04/freelance-lessons/"/>
    <updated>2014-05-04T07:33:01-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/05/04/freelance-lessons</id>
    <content type="html"><![CDATA[<p>Lessons from recent projects<!--more--></p>

<h2>Specs and Sprints</h2>


<p>Which is easier to develop:</p>

<ul>
    <li>User logs in</li>
    <li>User uploads a cat photo and tags his cat&#8217;s name</li>
    <li>User publishes the photo and it&#8217;s viewable by other users who are interested in &#8220;cats&#8221;</li>
</ul>


<p>Or:</p>

<ul>
    <li>Users can share pictures of their kitties.</li>
</ul>


<p>?????</p>

<p>Clients don&rsquo;t always give good user stories for their projects and maybe it&rsquo;s some extra work to expand on simple specs, but detailed stories make feature development easier.</p>

<p>Work in sprints, not vague deadlines. Something like:</p>

<ul>
    <li>Week 1: User registrations</li>
    <li>Week 2: Cat uploading and tagging</li>
    <li>Week 3: Photo sharing through user interests</li>
</ul>


<p>with a quick client-side demo after each major milestone, is much more preferable to &ldquo;Finish the project by the end of the month.&rdquo;</p>

<h2>Modeling Models</h2>


<p>I had a bad habit of over-using <code>many-to-many</code> relationships between models. This leads to working code, but probably makes the database more complex than it needs to be. Before jumping in, how about spending some time extracting model relationships from the spec and seeing where self-referential and polymorphic relationships could be used?</p>

<h3>Really Fat Models</h3>


<p>Everyone talks about putting all of the logic in the controller, but very few people seem to be talking about creating classes with single responsibilities. Sandy Metz&#8217; Practical Object Oriented Design in Ruby is real good about hammering this point. The problem I have is putting it into practice and not ending up with 200+ line <code>User</code> models.</p>

<h3>Naming Attributes</h3>


<p>Creating conventions for model attribute names saves a lot of headache when models have similar attributes.</p>

<p>For example, when building a blog platform that serves both French and English content, posts will have both <code>french_title</code> and <code>english_title</code> attributes. Later on, when the <code>Post</code> <code>has_many :categories</code> and needs to serve these <code>categories</code> in both languages, it is a good idea to call the attributes <code>french_name</code> and <code>english_name</code> to stick with the convention on <code>Post</code>. Why? If they are called something else like <code>fre_name</code> and <code>en_name</code>, it&rsquo;s <em>highly</em> likely the attribute names will get mixed up somewhere and we could end up with code like <code>Post.fre_title</code>, which makes a mess of our methods and can sometimes be a pain to track down.</p>

<h2>Testing</h2>


<p>TDD is great, but I end up writing many <code>feature</code> specs and not enough <code>unit tests</code>. Some material from Thoughtbot talks about outside-in testing, in which feature tests guide development and unit tests are written along the way as they come up. Basically, as soon as the feature test requires changes to a model, those changes need to be unit tested before the feature test can continue.</p>

<p>Another point from Thoughtbot: in feature specs, test all the success scenarios, but only one failure scenario to avoid too much overlap between feature and unit tests. If a <code>Post</code> <code>validates :name, presence: true, uniqueness: true</code> and the feature spec tests Post creation, it&rsquo;s probably overkill to test that the submission fails on both the absence of and un-uniquess of <code>name</code>. Test for one failing case to be sure failure is handled correctly and deal with the other validations in unit tests.</p>

<h2>Secrets</h2>


<p>When a project calls for using some API, there&rsquo;s probably a gem to make things easier. Lots of documentation just dumps API keys into <code>config/your_api_gem.rb</code>, which will probably get committed to source and isn&rsquo;t such a great idea. Save some cleanup work later by dumping keys into <code>application.yml</code> or <code>secrets.yml</code> from the start.</p>

<h2>Where&#8217;s it going?</h2>


<p>It would be great to just do <code>heroku create</code> <code>git push heroku master</code> for every project, but Heroku is pricey and not always the right tool for the job. Deploying to a $5 Ubuntu instance on Digital Ocean &mdash; in addition to a test server on Heroku &mdash; could save some time if/when the project needs to be put on a vps.</p>

<p>The downside with duel-deploying to Heroku and DI is that requires a little extra work, but the benefits of practice on server-setup and testing the application in various environments probably outweight the timeloss.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails Caching Notes]]></title>
    <link href="http://evan-007.github.io/blog/2014/04/26/rails-caching-notes/"/>
    <updated>2014-04-26T03:06:47-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/04/26/rails-caching-notes</id>
    <content type="html"><![CDATA[<p>Some notes about rails caching and turbolinks.<!--more--></p>

<h2>ETags</h2>


<p>I had no idea what an Etag was until it came up in a codeschool course. Here&rsquo;s a <a href="https://www.tbray.org/ongoing/When/200x/2008/08/14/Rails-ETags">nice general article</a> about why they matter and here&rsquo;s <a href="http://www.bootyard.com/programming/etags-in-rails-4.html">another article</a> about Etags in Rails 4.</p>

<p>The gist is that if there is an often accessed controller action, use Rails&#8217; Etags may speed things up because it reduces server rendering. With regular etags, the server renders the response BEFORE comparing the incoming etag and then decides if it returns 304 or the response body.</p>

<p>To do this:</p>

<figure class='code'><figcaption><span>coconuts_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">CoconutsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'> <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>   <span class="vi">@coconut</span> <span class="o">=</span> <span class="no">Coconut</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>   <span class="n">fresh_when</span><span class="p">(</span><span class="vi">@coconut</span><span class="p">)</span>
</span><span class='line'> <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second link above explains this more, but basically <code>fresh_when</code> creates an Etag based on the model&rsquo;s attributes and compares the client+server etags before deciding whether or not to render the response and send it back.</p>

<p>What happens when the css files change but the model doesn&rsquo;t? Is <a href="http://ninjasandrobots.com/rails-caching-a-problem-with-etags-and-a-solution">this</a> still an issue?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Angular on Rails Part 1]]></title>
    <link href="http://evan-007.github.io/blog/2014/04/25/angular-on-rails-part-1/"/>
    <updated>2014-04-25T06:39:41-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/04/25/angular-on-rails-part-1</id>
    <content type="html"><![CDATA[<p>Let&rsquo;s build a rails API and feed it to angular.js.<!--more--></p>

<h2>The App</h2>


<p>We&rsquo;re going to build a basic rails restaurant application &mdash; API only &mdash; and then use angular.js to build the front end. It&rsquo;s a very simple app: users can register accounts, then create entries for restaurants with a photo and location information.</p>

<h3>Source Data</h3>


<p>Intead of using Faker or some other gem to generate some seed data, let&rsquo;s scrape some from a mostly dead site. (*NB scraping data probably isn&rsquo;t the best idea for production purposes and also isn&rsquo;t very nice, but here it&rsquo;s just for developement purposes.)</p>

<p>To get our data, we&rsquo;ll use <code>nokogiri</code> to parse a site and dump it&rsquo;s data to a csv file. It&rsquo;s really easy to import from a csv to fill out our sample application.</p>

<p>Here&rsquo;s the script:</p>

<figure class='code'><figcaption><span>scrape-some-data.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;open-uri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;nokogiri&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;csv&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">base_url</span> <span class="o">=</span> <span class="s2">&quot;http://shikdang.com/menu/page&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@count</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'><span class="k">for</span> <span class="n">n</span> <span class="k">in</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">102</span>
</span><span class='line'>  <span class="n">page</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">base_url</span><span class="si">}</span><span class="s2">&quot;</span><span class="o">+</span><span class="s2">&quot;:</span><span class="si">#{</span><span class="n">n</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">))</span>
</span><span class='line'>  <span class="n">page</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;.contentTitle a&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">link</span><span class="o">|</span>
</span><span class='line'>    <span class="n">resto_page</span> <span class="o">=</span> <span class="ss">Nokogiri</span><span class="p">:</span><span class="ss">:HTML</span><span class="p">(</span><span class="nb">open</span><span class="p">(</span><span class="s2">&quot;http://shikdang.com&quot;</span><span class="o">+</span><span class="n">link</span><span class="o">[</span><span class="s1">&#39;href&#39;</span><span class="o">]</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@title</span> <span class="o">=</span> <span class="n">resto_page</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;.fn&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>    <span class="vi">@lat</span> <span class="o">=</span> <span class="n">resto_page</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;.jr_latitude .fieldValue&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>
</span><span class='line'>    <span class="vi">@long</span> <span class="o">=</span> <span class="n">resto_page</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;.jr_longitude .fieldValue&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>    <span class="vi">@address</span> <span class="o">=</span> <span class="n">resto_page</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;.jr_address .fieldValue&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">text</span>
</span><span class='line'>    <span class="c1">#needs an array to specify which element, even if 1 on page</span>
</span><span class='line'>    <span class="vi">@image</span> <span class="o">=</span> <span class="n">resto_page</span><span class="o">.</span><span class="n">css</span><span class="p">(</span><span class="s1">&#39;.itemMainImage a&#39;</span><span class="p">)</span><span class="o">[</span><span class="mi">0</span><span class="o">][</span><span class="s1">&#39;href&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#a+ = append file,</span>
</span><span class='line'>    <span class="no">CSV</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="s1">&#39;data.csv&#39;</span><span class="p">,</span> <span class="s1">&#39;a+&#39;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>      <span class="n">row</span> <span class="o">&lt;&lt;</span> <span class="o">[</span><span class="vi">@title</span><span class="p">,</span> <span class="vi">@lat</span><span class="p">,</span> <span class="vi">@long</span><span class="p">,</span> <span class="vi">@address</span><span class="p">,</span> <span class="vi">@image</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">#keep a running progress count</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="vi">@count</span>
</span><span class='line'>    <span class="vi">@count</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>From looking at our target, we know there are 102 pages of data. We&rsquo;ll use the base pagination url <code>menu/page</code> and iterate over that to hit all of the inner pages. Likewise, on each inner page, we&rsquo;ll need to visit the restaurant&rsquo;s URL and grab some data. We can do this easily by finding a common <code>css class</code> on our target links, as on line 10.</p>

<p>Once nokogiri is on the target page, we&rsquo;ll find the interesting data&rsquo;s css class and use and instance variable to grab it easily, as on lines 13-19.</p>

<p>Finally, we&rsquo;ll use ruby&rsquo;s internal <code>csv</code> library to dump the data to <code>data.csv</code>. Opening a file with <code>a+</code> to append to the file. This mode also creates the file if it doesn&rsquo;t already exist. It&rsquo;s worth noting that if the script breaks (because of an http timeout or something), if we run it again, we&rsquo;ll have to dump that file unless we want repeat data. This could be improved by storing the pagination variable in an external file and incrementing it after each iteration. We could also improve this script by having it sleep for a few seconds in order to slow down the calls to our target server.</p>

<p>The <code>@count</code> is totally optionally, but it does keep track of the scraper&rsquo;s progress by printing to the terminal window.</p>

<p>&hellip;and now we&rsquo;re ready to build the app!</p>

<h2>Rails API</h2>


<p>Note: the bulk of this approach is available at <a href="https://egghead.io/lessons/angularjs-rails-todo-api-part-1">egghead.io</a> or <a href="http://railsapis.codeschool.com">Codeschool</a>.</p>

<p>Let&rsquo;s use the <a href="https://github.com/rails-api/rails-api">rails api gem</a>. <code>gem install rails-api</code>, then generate the app with <code>rails-api new resto</code>. Our app is called &lsquo;resto&rsquo; because we&rsquo;re gonna make a RESTful api and &lsquo;resto&rsquo; is French slang for restaurant.</p>

<p>Update the gemfile to include our testing gems:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">source</span> <span class="s1">&#39;https://rubygems.org&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Bundle edge Rails instead: gem &#39;rails&#39;, github: &#39;rails/rails&#39;</span>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="s1">&#39;4.0.3&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">gem</span> <span class="s1">&#39;rails-api&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span><span class="p">,</span> <span class="ss">:test</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;sqlite3&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;pg&#39;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:test</span><span class="p">,</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;rspec-rails&quot;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s2">&quot;factory_girl_rails&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Install rpsec <code>rails g rspec:install</code></p>

<p>Next, let&rsquo;s generate a model for our restos. From our scraped data earlier, we have a <code>title</code>, <code>latitude</code>, <code>longitude</code> and <code>address</code>. We&rsquo;ll also at least want to add a description and image for each resto. We&rsquo;ll handle images with paperclip, so for now run <code>rails g model restaurant title latitude:float longitude:float address:text description:text</code>. NB: we may end up using <a href="https://github.com/alexreisner/geocoder">geocoder gem</a> later, so let&rsquo;s save ourselves some work and use <code>latitude</code> and <code>longitude</code> now. Migrate the database <code>rake db:migrate db:test:clone</code>.</p>

<p>To version the API as per best practices, set the routing like so:</p>

<figure class='code'><figcaption><span>routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">Resto</span><span class="p">:</span><span class="ss">:Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="ss">:api</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">namespace</span> <span class="ss">:v1</span><span class="p">,</span> <span class="ss">defaults</span><span class="p">:</span> <span class="p">{</span><span class="nb">format</span><span class="p">:</span> <span class="ss">:json</span><span class="p">}</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">resources</span> <span class="ss">:restaurants</span><span class="p">,</span> <span class="ss">only</span><span class="p">:</span> <span class="o">[</span><span class="ss">:index</span><span class="p">,</span> <span class="ss">:show</span><span class="o">]</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The routes are going to be inside of the <code>api/v1</code> namespace and we&rsquo;re only going to work with the <code>index</code> and <code>show</code> actions for starters.</p>

<p>Make the <code>app/controllers/api/v1</code> folders and <code>touch app/controllers/api/v1/restaurants_controller.api</code>. Remember that <code>active_model_serializers</code> is included in the rails-api gem, so let&rsquo;s make our controller to use that gem:</p>

<figure class='code'><figcaption><span>restaurants_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">module</span> <span class="nn">Api</span>
</span><span class='line'>  <span class="k">module</span> <span class="nn">V1</span>
</span><span class='line'>      <span class="k">class</span> <span class="nc">RestaurantsController</span> <span class="o">&lt;</span> <span class="no">ApplicationController</span>
</span><span class='line'>          <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>              <span class="vi">@restaurants</span> <span class="o">=</span> <span class="no">Restaurant</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'>              <span class="n">render</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@restaurants</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>          <span class="k">def</span> <span class="nf">show</span>
</span><span class='line'>              <span class="vi">@restaurant</span> <span class="o">=</span> <span class="no">Restaurant</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>              <span class="n">render</span> <span class="ss">status</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@restaurant</span>
</span><span class='line'>          <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Next, create <code>app/serializers/restaurants_serializer.rb</code> and fill it up:</p>

<figure class='code'><figcaption><span>restaurants_serializer.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">RestaurantsSerializer</span> <span class="o">&lt;</span> <span class="ss">ActiveModel</span><span class="p">:</span><span class="ss">:Serializer</span>
</span><span class='line'>  <span class="n">attributes</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">:latitude</span><span class="p">,</span>
</span><span class='line'>   <span class="ss">:longitute</span><span class="p">,</span> <span class="ss">:address</span><span class="p">,</span> <span class="ss">:description</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are the attributes that we&rsquo;ll be getting from our controller. Fire up <code>rails s</code> and make sure it works at <code>localhost:3000/api/v1/restaurants</code>. It should respond with an empty array.</p>

<p>Great, let&rsquo;s import our data from our scraper. Move <code>data.csv</code> into <code>lib/tasks</code> and create <code>lib/tasks/resto.rake</code>. Let&rsquo;s create a rake task to import the data:</p>

<figure class='code'><figcaption><span>resto.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">task</span> <span class="n">import_restos</span><span class="p">:</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>  <span class="nb">require</span> <span class="s1">&#39;csv&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="vi">@title</span> <span class="o">=</span> <span class="mi">0</span>
</span><span class='line'>  <span class="vi">@lat</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="vi">@long</span> <span class="o">=</span> <span class="mi">2</span>
</span><span class='line'>  <span class="vi">@address</span> <span class="o">=</span> <span class="mi">3</span>
</span><span class='line'>
</span><span class='line'>  <span class="no">CSV</span><span class="o">.</span><span class="n">foreach</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="si">}</span><span class="s2">/lib/tasks/data.csv&quot;</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">row</span><span class="o">|</span>
</span><span class='line'>      <span class="n">a</span> <span class="o">=</span> <span class="no">Restaurant</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">title</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="vi">@title</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">latitude</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="vi">@lat</span><span class="o">]</span><span class="p">,</span> <span class="ss">longitude</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="vi">@long</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>          <span class="ss">address</span><span class="p">:</span> <span class="n">row</span><span class="o">[</span><span class="vi">@address</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>      <span class="n">a</span><span class="o">.</span><span class="n">save</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>CSV opens the file and then creates a new record from each of the rows. We also have a row with the image URL, but we&rsquo;ll skip that for now. Go back to <code>localhost:3000/api/v1/restaurants</code> and verify that there&rsquo;s a pile of json data. The other endpoint for the api is at <code>localhost:3000/api/v1/restaurants/1</code> and should return just one resto&rsquo;s data.</p>

<h2>Testing</h2>


<p>Here&rsquo;s a great post on testing Rails&#8217; APIs w/rspec and basically what we&rsquo;ll be following: <a href="http://matthewlehner.net/rails-api-testing-guidelines/">Testing Rails APIs with Rspec</a></p>

<p>And that&rsquo;s the start to the backend for our new app!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setup on Digital Ocean]]></title>
    <link href="http://evan-007.github.io/blog/2014/03/28/setup-on-digital-ocean/"/>
    <updated>2014-03-28T04:14:31-04:00</updated>
    <id>http://evan-007.github.io/blog/2014/03/28/setup-on-digital-ocean</id>
    <content type="html"><![CDATA[<p>How to setup and get a rails app on digital ocean.<!--more--></p>

<h2>Provision Server for Rails</h2>


<p>Clone <a href="https://github.com/TalkingQuickly/rails-server-template">server setup repo</a> from book</p>

<p>Bundle install.</p>

<p>Generate password and put in deploy.json</p>

<p>Add sshkey to deploy.json</p>

<p>Create an ubuntu 12.04 box on DO</p>

<p>ssh into the box and add my ssh key: <code>cat ~/.ssh/id_rsa.pub | ssh root@yourserverip "cat &gt;&gt; ~/.ssh/authorized_keys"</code></p>

<p>skip to here if ssh w/digitalocean is setup:</p>

<p>install chef: <code>bundle exec knife solo prepare root@serverip</code></p>

<p>This makes a file <code>/nodes/serverip.json</code></p>

<p>Copy contents from book example into <code>.json file</code>. Change username/pw for monit. Tell the server which rubies you want installed. Set pw for postgres. NB: this script creates a user <code>deploy</code> on the box.</p>

<p>Run <code>bundle exec knife solo cook root@serverip</code> and wait while it sets up the server for Rails, postgres and redis. Go do something else. bunch of password prompts.</p>

<p>If errors on <code>knife solo cook</code>, note the command and run it on the server &ndash; returns better error message. Had to change curl permissions with chmod.</p>

<p>verify that it worked <code>ssh deploy@serverip</code></p>

<p>If there are ssh errors check the logs with root at <code>/var/log/auth.log</code></p>

<p>Done! Ready for capistrano</p>

<h2>Capistrano</h2>


<p>Need to fix the ruby version on the server?</p>

<p>SSH into the server and <code>rbenv install --list</code> for a list of rubies, then <code>rbenv install 2.0.0-p247</code> or whatever is needed for the app and let it run.</p>

<p>Run <code>rbenv rehash</code> after installing, then use <code>rbenv global 2.0.0-p247</code> to set the ruby -v.</p>

<p>Must use <code>gem install bundler</code> to install bundler manually for each ruby installed.</p>

<p>Generate a public key for <code>deploy</code> and <a href="https://help.github.com/articles/generating-ssh-keys">link it</a> to github&rsquo;s <code>deploy keys</code>.</p>

<p>If ssh-add won&rsquo;t run, try <a href="https://coderwall.com/p/rdi_wq">this</a>  <code>eval $(ssh-agent)</code></p>

<p>Remove nginx default page at <code>/etc/nginx/</code> and run <code>nginx -s reload</code></p>

<p>Add these gems to the rails app:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>gem 'capistrano', '~&gt;3.0.1' 
</span><span class='line'>
</span><span class='line'>#railsspecificcapistranofunctions
</span><span class='line'>gem 'capistrano-rails', '~&gt;1.1.0'
</span><span class='line'>
</span><span class='line'>#integratebundlerwithcapistrano
</span><span class='line'>gem 'capistrano-bundler'
</span><span class='line'>
</span><span class='line'>#ifyouareusingRbenv
</span><span class='line'>gem 'capistrano-rbenv', "~&gt;2.0"</span></code></pre></td></tr></table></div></figure>


<p>Run <code>bundle exec cap install</code></p>

<p>Copy the lib/capistrano files from sample repo <a href="https://github.com/TalkingQuickly/capistrano-3-rails-template">here</a>.</p>

<p>with errors like:</p>

<p>Could not find a JavaScript runtime. See <a href="https://github.com/sstephenson/execjs">https://github.com/sstephenson/execjs</a> for a list of available runtimes. (ExecJS::RuntimeUnavailable)</p>

<p> sudo apt-get install nodejs</p>

<p> [47efed43]     /etc/init.d/unicorn_angularails_production: 16: kill:
DEBUG [47efed43]    No such process
DEBUG [47efed43]
DEBUG [47efed43]    Couldn&rsquo;t reload, starting &lsquo;cd /home/deploy/apps/angularails_production/current;  bundle exec unicorn -D -c /home/deploy/apps/angularails_production/shared/config/unicorn.rb -E production&rsquo; instead
DEBUG [47efed43]    master failed to start, check stderr log for details
cap aborted!</p>

<p>uncomment rubyracer in gemfile, add gem unicorn</p>

<p>I, [2014-03-30T06:54:30.926541 #1119]  INFO &mdash; : Refreshing Gem list
I, [2014-03-30T06:54:32.412769 #1119]  INFO &mdash; : unlinking existing socket=/tmp/unicorn.angularails_production.sock
I, [2014-03-30T06:54:32.413053 #1119]  INFO &mdash; : listening on addr=/tmp/unicorn.angularails_production.sock fd=11
E, [2014-03-30T06:54:32.533681 #1119] ERROR &mdash; : Permission denied &ndash; /home/deploy/apps/angularails_production/releases/20140330105359/config/database.yml (Errno::EACCES)</p>

<p>20140330110007</p>

<p>nproblem with database.yml user?</p>

<p>create database,</p>

<p>create user,</p>

<p>add database and user info to database.yml in /shared/config</p>

<p>run rake tasks like this on server:</p>

<p><code>RAILS_ENV=production</code></p>

<p>set global variables like for paperclip / s3 and apis</p>
]]></content>
  </entry>
  
</feed>
